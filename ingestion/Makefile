PROJECT_NAME = wal_decoder
PYTHON = python3
PIP = pip
CELERY = celery
DOCKER_COMPOSE = docker-compose
VENV = .venv

SRC_DIR = src
WORKERS_DIR = $(SRC_DIR)/workers
WAL_LISTENER = $(SRC_DIR)/main.py

WORKERS = identity_worker finance_worker insurance_worker credit_worker compliance_worker commerce_worker

VENV_ACTIVATE = . $(VENV)/bin/activate

.PHONY: setup
setup:
	@echo "üöÄ Criando ambiente virtual..."
	$(PYTHON) -m venv $(VENV)
	@echo "üì¶ Instalando depend√™ncias..."
	$(VENV)/bin/$(PIP) install --upgrade pip
	$(VENV)/bin/$(PIP) install -r requirements.txt
	@echo "‚úÖ Configura√ß√£o conclu√≠da!"

# Subir servi√ßos com Docker Compose
.PHONY: up
up:
	@echo "‚¨ÜÔ∏è Iniciando os servi√ßos..."
	@docker-compose up -d
	@echo "‚úÖ Servi√ßos iniciados!"

# Derrubar servi√ßos com Docker Compose
.PHONY: down
down:
	@echo "‚¨áÔ∏è Parando os servi√ßos..."
	@docker-compose down
	@echo "‚úÖ Servi√ßos parados!"

# Reiniciar servi√ßos com Docker Compose
.PHONY: restart
restart:
	@echo "üîÑ Reiniciando os servi√ßos..."
	@docker-compose restart
	@echo "‚úÖ Servi√ßos reiniciados!"

.PHONY: listen
listen:
	@echo "üì° Iniciando WAL Listener..."
	export PYTHONPATH="${PYTHONPATH}:$(pwd)" && \
	$(PYTHON) $(WAL_LISTENER)

.PHONY: workers
workers:
	@echo "üõ†Ô∏è Iniciando todos os workers..."
	$(foreach worker, $(WORKERS), \
		$(VENV)/bin/$(CELERY) -A $(WORKERS_DIR).$(worker) worker --loglevel=info -Q $(worker) & \
	)

.PHONY: worker
worker:
	@echo "üîß Especifique o worker: make worker name=<worker>"
	@echo "Op√ß√µes dispon√≠veis: $(WORKERS)"

.PHONY: worker_run
worker_run:
	@echo "üöÄ Iniciando worker $(name)..."
	$(VENV)/bin/$(CELERY) -A $(WORKERS_DIR).$(name) worker --loglevel=info -Q $(name)

.PHONY: start_workers
start_workers:
	@echo "‚öôÔ∏è Rodando todos os workers em um √∫nico processo..."
	$(VENV)/bin/$(CELERY) -A $(WORKERS_DIR).celery_app worker --loglevel=info --concurrency=6

.PHONY: run
run: up listen workers

.PHONY: logs
logs:
	@echo "üìú Logs do Celery..."
	$(DOCKER_COMPOSE) logs -f celery

.PHONY: test
test:
	@echo "üß™ Rodando testes..."
	$(VENV)/bin/pytest tests/

.PHONY: clean
clean:
	@echo "üßπ Limpando ambiente..."
	rm -rf $(VENV) __pycache__ .mypy_cache .pytest_cache
	find . -type d -name "__pycache__" -exec rm -rf {} +
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	@echo "‚úÖ Limpeza conclu√≠da!"

run-migrations:
	python src/utils/migrations.py
