# export $(xargs <.env)
# export PYTHONPATH="${PYTHONPATH}:$(pwd)"

# Defini√ß√£o de vari√°veis
PYTHON = python3
PIP = pip
VENV_DIR = venv
COUCHDB_URL = http://admin:password@localhost:5984
COUCHDB_DBNAME = etl_jobs
PROJECT_NAME = etl_loader
FUNCTION_NAME = etl_loader
GCP_REGION = us-central1
PORT = 5555

# Inicializar ambiente virtual
.PHONY: venv
venv:
	@echo "üîß Criando ambiente virtual..."
	@$(PYTHON) -m venv $(VENV_DIR)
	@echo "‚úÖ Ambiente virtual criado!"

# Instalar depend√™ncias
.PHONY: install
install: venv
	@echo "üì¶ Instalando depend√™ncias..."
	@$(VENV_DIR)/bin/$(PIP) install --upgrade pip
	@$(VENV_DIR)/bin/$(PIP) install -r requirements.txt
	@echo "‚úÖ Depend√™ncias instaladas!"

# Rodar a aplica√ß√£o localmente
.PHONY: run
run:
	@echo "üöÄ Iniciando FastAPI na porta $(PORT)..."
	PYTHONPATH=$(pwd)/src uvicorn src.function-api:app --host 0.0.0.0 --port $(PORT) --reload

# Rodar testes
.PHONY: test
test:
	@echo "üß™ Executando testes..."
	@$(VENV_DIR)/bin/pytest tests/

# Criar e configurar o banco CouchDB
.PHONY: setup-couchdb
setup-couchdb:
	@echo "üõ†Ô∏è Criando banco CouchDB se n√£o existir..."
	curl -X PUT "$(COUCHDB_URL)/$(COUCHDB_DBNAME)" || echo "‚úÖ Banco j√° existe!"

# Construir Docker
.PHONY: build
build:
	@echo "üê≥ Construindo imagem Docker..."
	@docker build -t $(PROJECT_NAME) .

# Rodar Docker
.PHONY: run-docker
run-docker:
	@echo "üöÄ Rodando Docker..."
	@docker run -p $(PORT):$(PORT) $(PROJECT_NAME)

# Subir servi√ßos com Docker Compose
.PHONY: up
up:
	@echo "‚¨ÜÔ∏è Iniciando os servi√ßos (FastAPI e CouchDB)..."
	@docker-compose up -d
	@echo "‚úÖ Servi√ßos iniciados!"

# Derrubar servi√ßos com Docker Compose
.PHONY: down
down:
	@echo "‚¨áÔ∏è Parando os servi√ßos..."
	@docker-compose down
	@echo "‚úÖ Servi√ßos parados!"

# Reiniciar servi√ßos com Docker Compose
.PHONY: restart
restart:
	@echo "üîÑ Reiniciando os servi√ßos..."
	@docker-compose restart
	@echo "‚úÖ Servi√ßos reiniciados!"

# Limpeza
.PHONY: clean
clean:
	@echo "üóëÔ∏è Removendo arquivos tempor√°rios..."
	@rm -rf $(VENV_DIR) __pycache__ .pytest_cache
	@echo "‚úÖ Limpeza conclu√≠da!"

run-migrations:
	python src/utils/migrations.py

run-main:
	python src/main.py

# Ajuda
.PHONY: help
help:
	@echo "üìñ Comandos dispon√≠veis:"
	@echo "  make venv            -> Criar ambiente virtual"
	@echo "  make install         -> Instalar depend√™ncias"
	@echo "  make run             -> Rodar FastAPI localmente"
	@echo "  make test            -> Executar testes"
	@echo "  make setup-couchdb   -> Criar banco CouchDB"
	@echo "  make build           -> Construir Docker"
	@echo "  make run-docker      -> Rodar aplica√ß√£o em Docker"
	@echo "  make up              -> Subir servi√ßos (FastAPI + CouchDB) com Docker Compose"
	@echo "  make down            -> Parar servi√ßos com Docker Compose"
	@echo "  make restart         -> Reiniciar servi√ßos com Docker Compose"
	@echo "  make clean           -> Limpar arquivos tempor√°rios"