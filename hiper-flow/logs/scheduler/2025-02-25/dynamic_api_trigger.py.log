[2025-02-25T18:52:48.170+0000] {processor.py:161} INFO - Started process (PID=194) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:52:48.170+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T18:52:48.171+0000] {logging_mixin.py:188} INFO - [2025-02-25T18:52:48.171+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:52:48.174+0000] {logging_mixin.py:188} INFO - [2025-02-25T18:52:48.173+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 1, in <module>
    import dagfactory
ModuleNotFoundError: No module named 'dagfactory'
[2025-02-25T18:52:48.174+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:52:48.186+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.018 seconds
[2025-02-25T18:53:07.675+0000] {processor.py:161} INFO - Started process (PID=66) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:53:07.676+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T18:53:07.677+0000] {logging_mixin.py:188} INFO - [2025-02-25T18:53:07.677+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:53:07.679+0000] {logging_mixin.py:188} INFO - [2025-02-25T18:53:07.679+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 1, in <module>
    import dagfactory
ModuleNotFoundError: No module named 'dagfactory'
[2025-02-25T18:53:07.679+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:53:07.689+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.016 seconds
[2025-02-25T18:53:38.067+0000] {processor.py:161} INFO - Started process (PID=73) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:53:38.068+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T18:53:38.069+0000] {logging_mixin.py:188} INFO - [2025-02-25T18:53:38.069+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:53:38.073+0000] {logging_mixin.py:188} INFO - [2025-02-25T18:53:38.072+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 1, in <module>
    import dagfactory
ModuleNotFoundError: No module named 'dagfactory'
[2025-02-25T18:53:38.073+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:53:38.086+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.025 seconds
[2025-02-25T18:54:08.371+0000] {processor.py:161} INFO - Started process (PID=80) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:54:08.372+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T18:54:08.375+0000] {logging_mixin.py:188} INFO - [2025-02-25T18:54:08.375+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:54:08.380+0000] {logging_mixin.py:188} INFO - [2025-02-25T18:54:08.379+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 1, in <module>
    import dagfactory
ModuleNotFoundError: No module named 'dagfactory'
[2025-02-25T18:54:08.380+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:54:08.407+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.041 seconds
[2025-02-25T18:55:38.890+0000] {processor.py:161} INFO - Started process (PID=73) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:55:38.891+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T18:55:38.892+0000] {logging_mixin.py:188} INFO - [2025-02-25T18:55:38.892+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:55:38.894+0000] {logging_mixin.py:188} INFO - [2025-02-25T18:55:38.894+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 1, in <module>
    import dagfactory
ModuleNotFoundError: No module named 'dagfactory'
[2025-02-25T18:55:38.895+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:55:38.908+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.020 seconds
[2025-02-25T18:56:09.164+0000] {processor.py:161} INFO - Started process (PID=80) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:56:09.164+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T18:56:09.166+0000] {logging_mixin.py:188} INFO - [2025-02-25T18:56:09.165+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:56:09.168+0000] {logging_mixin.py:188} INFO - [2025-02-25T18:56:09.167+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 1, in <module>
    import dagfactory
ModuleNotFoundError: No module named 'dagfactory'
[2025-02-25T18:56:09.168+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:56:09.185+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.023 seconds
[2025-02-25T18:56:39.409+0000] {processor.py:161} INFO - Started process (PID=112) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:56:39.410+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T18:56:39.411+0000] {logging_mixin.py:188} INFO - [2025-02-25T18:56:39.411+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:56:40.087+0000] {logging_mixin.py:188} INFO - [2025-02-25T18:56:40.086+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 109, in _load_config
    config: Dict[str, Any] = yaml.load(stream=config_with_env, Loader=yaml.FullLoader)
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/__init__.py", line 81, in load
    return loader.get_single_data()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/constructor.py", line 49, in get_single_data
    node = self.get_single_node()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/composer.py", line 36, in get_single_node
    document = self.compose_document()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/composer.py", line 55, in compose_document
    node = self.compose_node(None, None)
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/composer.py", line 84, in compose_node
    node = self.compose_mapping_node(anchor)
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/composer.py", line 127, in compose_mapping_node
    while not self.check_event(MappingEndEvent):
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/parser.py", line 98, in check_event
    self.current_event = self.state()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/parser.py", line 428, in parse_block_mapping_key
    if self.check_token(KeyToken):
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/scanner.py", line 116, in check_token
    self.fetch_more_tokens()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/scanner.py", line 258, in fetch_more_tokens
    raise ScannerError("while scanning for the next token", None,
yaml.scanner.ScannerError: while scanning for the next token
found character '%' that cannot start any token
  in "<unicode string>", line 13, column 2:
    {% for layer, action in {"bronze" ...
     ^

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 8, in <module>
    dag_factory = dagfactory.DagFactory(dag_config_path)
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 41, in __init__
    self.config: Dict[str, Any] = DagFactory._load_config(config_filepath=config_filepath)
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 111, in _load_config
    raise DagFactoryConfigException("Invalid DAG Factory config file") from err
dagfactory.exceptions.DagFactoryConfigException: Invalid DAG Factory config file
[2025-02-25T18:56:40.087+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:56:40.096+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.689 seconds
[2025-02-25T18:57:11.304+0000] {processor.py:161} INFO - Started process (PID=66) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:57:11.306+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T18:57:11.306+0000] {logging_mixin.py:188} INFO - [2025-02-25T18:57:11.306+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:57:11.309+0000] {logging_mixin.py:188} INFO - [2025-02-25T18:57:11.308+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 109, in _load_config
    config: Dict[str, Any] = yaml.load(stream=config_with_env, Loader=yaml.FullLoader)
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/__init__.py", line 81, in load
    return loader.get_single_data()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/constructor.py", line 49, in get_single_data
    node = self.get_single_node()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/composer.py", line 36, in get_single_node
    document = self.compose_document()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/composer.py", line 55, in compose_document
    node = self.compose_node(None, None)
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/composer.py", line 84, in compose_node
    node = self.compose_mapping_node(anchor)
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/composer.py", line 127, in compose_mapping_node
    while not self.check_event(MappingEndEvent):
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/parser.py", line 98, in check_event
    self.current_event = self.state()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/parser.py", line 428, in parse_block_mapping_key
    if self.check_token(KeyToken):
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/scanner.py", line 116, in check_token
    self.fetch_more_tokens()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/scanner.py", line 258, in fetch_more_tokens
    raise ScannerError("while scanning for the next token", None,
yaml.scanner.ScannerError: while scanning for the next token
found character '%' that cannot start any token
  in "<unicode string>", line 13, column 2:
    {% for layer, action in {"bronze" ...
     ^

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 8, in <module>
    dag_factory = dagfactory.DagFactory(dag_config_path)
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 41, in __init__
    self.config: Dict[str, Any] = DagFactory._load_config(config_filepath=config_filepath)
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 111, in _load_config
    raise DagFactoryConfigException("Invalid DAG Factory config file") from err
dagfactory.exceptions.DagFactoryConfigException: Invalid DAG Factory config file
[2025-02-25T18:57:11.309+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:57:11.318+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.127 seconds
[2025-02-25T18:57:41.552+0000] {processor.py:161} INFO - Started process (PID=73) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:57:41.553+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T18:57:41.555+0000] {logging_mixin.py:188} INFO - [2025-02-25T18:57:41.555+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:57:41.564+0000] {logging_mixin.py:188} INFO - [2025-02-25T18:57:41.562+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 109, in _load_config
    config: Dict[str, Any] = yaml.load(stream=config_with_env, Loader=yaml.FullLoader)
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/__init__.py", line 81, in load
    return loader.get_single_data()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/constructor.py", line 49, in get_single_data
    node = self.get_single_node()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/composer.py", line 36, in get_single_node
    document = self.compose_document()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/composer.py", line 55, in compose_document
    node = self.compose_node(None, None)
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/composer.py", line 84, in compose_node
    node = self.compose_mapping_node(anchor)
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/composer.py", line 127, in compose_mapping_node
    while not self.check_event(MappingEndEvent):
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/parser.py", line 98, in check_event
    self.current_event = self.state()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/parser.py", line 428, in parse_block_mapping_key
    if self.check_token(KeyToken):
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/scanner.py", line 116, in check_token
    self.fetch_more_tokens()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/scanner.py", line 258, in fetch_more_tokens
    raise ScannerError("while scanning for the next token", None,
yaml.scanner.ScannerError: while scanning for the next token
found character '%' that cannot start any token
  in "<unicode string>", line 13, column 2:
    {% for layer, action in {"bronze" ...
     ^

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 8, in <module>
    dag_factory = dagfactory.DagFactory(dag_config_path)
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 41, in __init__
    self.config: Dict[str, Any] = DagFactory._load_config(config_filepath=config_filepath)
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 111, in _load_config
    raise DagFactoryConfigException("Invalid DAG Factory config file") from err
dagfactory.exceptions.DagFactoryConfigException: Invalid DAG Factory config file
[2025-02-25T18:57:41.564+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:57:41.590+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.043 seconds
[2025-02-25T18:58:11.919+0000] {processor.py:161} INFO - Started process (PID=80) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:58:11.920+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T18:58:11.921+0000] {logging_mixin.py:188} INFO - [2025-02-25T18:58:11.921+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:58:11.928+0000] {logging_mixin.py:188} INFO - [2025-02-25T18:58:11.926+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 109, in _load_config
    config: Dict[str, Any] = yaml.load(stream=config_with_env, Loader=yaml.FullLoader)
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/__init__.py", line 81, in load
    return loader.get_single_data()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/constructor.py", line 49, in get_single_data
    node = self.get_single_node()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/composer.py", line 36, in get_single_node
    document = self.compose_document()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/composer.py", line 55, in compose_document
    node = self.compose_node(None, None)
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/composer.py", line 84, in compose_node
    node = self.compose_mapping_node(anchor)
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/composer.py", line 127, in compose_mapping_node
    while not self.check_event(MappingEndEvent):
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/parser.py", line 98, in check_event
    self.current_event = self.state()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/parser.py", line 428, in parse_block_mapping_key
    if self.check_token(KeyToken):
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/scanner.py", line 116, in check_token
    self.fetch_more_tokens()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/scanner.py", line 258, in fetch_more_tokens
    raise ScannerError("while scanning for the next token", None,
yaml.scanner.ScannerError: while scanning for the next token
found character '%' that cannot start any token
  in "<unicode string>", line 13, column 2:
    {% for layer, action in {"bronze" ...
     ^

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 8, in <module>
    dag_factory = dagfactory.DagFactory(dag_config_path)
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 41, in __init__
    self.config: Dict[str, Any] = DagFactory._load_config(config_filepath=config_filepath)
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 111, in _load_config
    raise DagFactoryConfigException("Invalid DAG Factory config file") from err
dagfactory.exceptions.DagFactoryConfigException: Invalid DAG Factory config file
[2025-02-25T18:58:11.931+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:58:11.949+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.033 seconds
[2025-02-25T18:58:42.267+0000] {processor.py:161} INFO - Started process (PID=93) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:58:42.268+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T18:58:42.270+0000] {logging_mixin.py:188} INFO - [2025-02-25T18:58:42.269+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:58:42.275+0000] {logging_mixin.py:188} INFO - [2025-02-25T18:58:42.273+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 109, in _load_config
    config: Dict[str, Any] = yaml.load(stream=config_with_env, Loader=yaml.FullLoader)
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/__init__.py", line 81, in load
    return loader.get_single_data()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/constructor.py", line 49, in get_single_data
    node = self.get_single_node()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/composer.py", line 36, in get_single_node
    document = self.compose_document()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/composer.py", line 55, in compose_document
    node = self.compose_node(None, None)
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/composer.py", line 84, in compose_node
    node = self.compose_mapping_node(anchor)
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/composer.py", line 127, in compose_mapping_node
    while not self.check_event(MappingEndEvent):
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/parser.py", line 98, in check_event
    self.current_event = self.state()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/parser.py", line 428, in parse_block_mapping_key
    if self.check_token(KeyToken):
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/scanner.py", line 116, in check_token
    self.fetch_more_tokens()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/scanner.py", line 258, in fetch_more_tokens
    raise ScannerError("while scanning for the next token", None,
yaml.scanner.ScannerError: while scanning for the next token
found character '%' that cannot start any token
  in "<unicode string>", line 13, column 2:
    {% for layer, action in {"bronze" ...
     ^

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 8, in <module>
    dag_factory = dagfactory.DagFactory(dag_config_path)
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 41, in __init__
    self.config: Dict[str, Any] = DagFactory._load_config(config_filepath=config_filepath)
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 111, in _load_config
    raise DagFactoryConfigException("Invalid DAG Factory config file") from err
dagfactory.exceptions.DagFactoryConfigException: Invalid DAG Factory config file
[2025-02-25T18:58:42.275+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:58:42.292+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.030 seconds
[2025-02-25T18:59:12.582+0000] {processor.py:161} INFO - Started process (PID=100) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:59:12.582+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T18:59:12.583+0000] {logging_mixin.py:188} INFO - [2025-02-25T18:59:12.583+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:59:12.587+0000] {logging_mixin.py:188} INFO - [2025-02-25T18:59:12.586+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 109, in _load_config
    config: Dict[str, Any] = yaml.load(stream=config_with_env, Loader=yaml.FullLoader)
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/__init__.py", line 81, in load
    return loader.get_single_data()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/constructor.py", line 49, in get_single_data
    node = self.get_single_node()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/composer.py", line 36, in get_single_node
    document = self.compose_document()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/composer.py", line 55, in compose_document
    node = self.compose_node(None, None)
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/composer.py", line 84, in compose_node
    node = self.compose_mapping_node(anchor)
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/composer.py", line 127, in compose_mapping_node
    while not self.check_event(MappingEndEvent):
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/parser.py", line 98, in check_event
    self.current_event = self.state()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/parser.py", line 428, in parse_block_mapping_key
    if self.check_token(KeyToken):
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/scanner.py", line 116, in check_token
    self.fetch_more_tokens()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/scanner.py", line 258, in fetch_more_tokens
    raise ScannerError("while scanning for the next token", None,
yaml.scanner.ScannerError: while scanning for the next token
found character '%' that cannot start any token
  in "<unicode string>", line 13, column 2:
    {% for layer, action in {"bronze" ...
     ^

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 8, in <module>
    dag_factory = dagfactory.DagFactory(dag_config_path)
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 41, in __init__
    self.config: Dict[str, Any] = DagFactory._load_config(config_filepath=config_filepath)
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 111, in _load_config
    raise DagFactoryConfigException("Invalid DAG Factory config file") from err
dagfactory.exceptions.DagFactoryConfigException: Invalid DAG Factory config file
[2025-02-25T18:59:12.587+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:59:12.602+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.022 seconds
[2025-02-25T18:59:42.936+0000] {processor.py:161} INFO - Started process (PID=107) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:59:42.937+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T18:59:42.940+0000] {logging_mixin.py:188} INFO - [2025-02-25T18:59:42.939+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:59:42.949+0000] {logging_mixin.py:188} INFO - [2025-02-25T18:59:42.947+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 109, in _load_config
    config: Dict[str, Any] = yaml.load(stream=config_with_env, Loader=yaml.FullLoader)
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/__init__.py", line 81, in load
    return loader.get_single_data()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/constructor.py", line 49, in get_single_data
    node = self.get_single_node()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/composer.py", line 36, in get_single_node
    document = self.compose_document()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/composer.py", line 55, in compose_document
    node = self.compose_node(None, None)
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/composer.py", line 84, in compose_node
    node = self.compose_mapping_node(anchor)
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/composer.py", line 127, in compose_mapping_node
    while not self.check_event(MappingEndEvent):
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/parser.py", line 98, in check_event
    self.current_event = self.state()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/parser.py", line 428, in parse_block_mapping_key
    if self.check_token(KeyToken):
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/scanner.py", line 116, in check_token
    self.fetch_more_tokens()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/scanner.py", line 258, in fetch_more_tokens
    raise ScannerError("while scanning for the next token", None,
yaml.scanner.ScannerError: while scanning for the next token
found character '%' that cannot start any token
  in "<unicode string>", line 13, column 2:
    {% for layer, action in {"bronze" ...
     ^

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 8, in <module>
    dag_factory = dagfactory.DagFactory(dag_config_path)
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 41, in __init__
    self.config: Dict[str, Any] = DagFactory._load_config(config_filepath=config_filepath)
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 111, in _load_config
    raise DagFactoryConfigException("Invalid DAG Factory config file") from err
dagfactory.exceptions.DagFactoryConfigException: Invalid DAG Factory config file
[2025-02-25T18:59:42.949+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T18:59:42.978+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.047 seconds
[2025-02-25T19:00:13.278+0000] {processor.py:161} INFO - Started process (PID=114) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:00:13.279+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:00:13.282+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:00:13.281+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:00:13.290+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:00:13.288+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 109, in _load_config
    config: Dict[str, Any] = yaml.load(stream=config_with_env, Loader=yaml.FullLoader)
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/__init__.py", line 81, in load
    return loader.get_single_data()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/constructor.py", line 49, in get_single_data
    node = self.get_single_node()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/composer.py", line 36, in get_single_node
    document = self.compose_document()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/composer.py", line 55, in compose_document
    node = self.compose_node(None, None)
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/composer.py", line 84, in compose_node
    node = self.compose_mapping_node(anchor)
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/composer.py", line 127, in compose_mapping_node
    while not self.check_event(MappingEndEvent):
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/parser.py", line 98, in check_event
    self.current_event = self.state()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/parser.py", line 428, in parse_block_mapping_key
    if self.check_token(KeyToken):
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/scanner.py", line 116, in check_token
    self.fetch_more_tokens()
  File "/home/airflow/.local/lib/python3.8/site-packages/yaml/scanner.py", line 258, in fetch_more_tokens
    raise ScannerError("while scanning for the next token", None,
yaml.scanner.ScannerError: while scanning for the next token
found character '%' that cannot start any token
  in "<unicode string>", line 13, column 2:
    {% for layer, action in {"bronze" ...
     ^

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 8, in <module>
    dag_factory = dagfactory.DagFactory(dag_config_path)
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 41, in __init__
    self.config: Dict[str, Any] = DagFactory._load_config(config_filepath=config_filepath)
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 111, in _load_config
    raise DagFactoryConfigException("Invalid DAG Factory config file") from err
dagfactory.exceptions.DagFactoryConfigException: Invalid DAG Factory config file
[2025-02-25T19:00:13.290+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:00:13.315+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.041 seconds
[2025-02-25T19:00:43.641+0000] {processor.py:161} INFO - Started process (PID=121) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:00:43.642+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:00:43.645+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:00:43.644+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:00:43.718+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:00:43.717+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:00:43.719+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:00:43.731+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.095 seconds
[2025-02-25T19:01:14.073+0000] {processor.py:161} INFO - Started process (PID=128) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:01:14.074+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:01:14.076+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:01:14.076+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:01:14.143+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:01:14.142+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:01:14.143+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:01:14.153+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.085 seconds
[2025-02-25T19:01:44.418+0000] {processor.py:161} INFO - Started process (PID=135) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:01:44.418+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:01:44.419+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:01:44.419+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:01:44.475+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:01:44.474+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:01:44.476+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:01:44.488+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.072 seconds
[2025-02-25T19:02:14.839+0000] {processor.py:161} INFO - Started process (PID=142) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:02:14.841+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:02:14.843+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:02:14.843+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:02:14.911+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:02:14.910+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:02:14.911+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:02:14.925+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.090 seconds
[2025-02-25T19:02:45.250+0000] {processor.py:161} INFO - Started process (PID=149) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:02:45.251+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:02:45.254+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:02:45.254+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:02:45.329+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:02:45.328+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:02:45.329+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:02:45.343+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.097 seconds
[2025-02-25T19:03:04.666+0000] {processor.py:161} INFO - Started process (PID=66) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:03:04.666+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:03:04.667+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:03:04.667+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:03:04.836+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:03:04.835+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:03:04.836+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:03:04.845+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.181 seconds
[2025-02-25T19:03:35.002+0000] {processor.py:161} INFO - Started process (PID=79) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:03:35.003+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:03:35.005+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:03:35.005+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:03:35.156+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:03:35.155+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:03:35.156+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:03:35.164+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.165 seconds
[2025-02-25T19:04:05.422+0000] {processor.py:161} INFO - Started process (PID=86) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:04:05.423+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:04:05.424+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:04:05.424+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:04:05.559+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:04:05.558+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:04:05.559+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:04:05.576+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.158 seconds
[2025-02-25T19:04:35.738+0000] {processor.py:161} INFO - Started process (PID=93) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:04:35.739+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:04:35.742+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:04:35.741+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:04:35.918+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:04:35.917+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:04:35.918+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:04:35.931+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.197 seconds
[2025-02-25T19:05:06.322+0000] {processor.py:161} INFO - Started process (PID=100) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:05:06.323+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:05:06.325+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:05:06.325+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:05:06.389+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:05:06.388+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:05:06.389+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:05:06.402+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.084 seconds
[2025-02-25T19:05:36.674+0000] {processor.py:161} INFO - Started process (PID=107) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:05:36.675+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:05:36.677+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:05:36.676+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:05:36.750+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:05:36.749+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:05:36.750+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:05:36.762+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.094 seconds
[2025-02-25T19:06:07.019+0000] {processor.py:161} INFO - Started process (PID=114) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:06:07.021+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:06:07.024+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:06:07.024+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:06:07.089+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:06:07.088+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:06:07.089+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:06:07.099+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.085 seconds
[2025-02-25T19:06:37.354+0000] {processor.py:161} INFO - Started process (PID=121) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:06:37.355+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:06:37.358+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:06:37.358+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:06:37.423+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:06:37.423+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:06:37.423+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:06:37.438+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.089 seconds
[2025-02-25T19:07:07.750+0000] {processor.py:161} INFO - Started process (PID=128) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:07:07.751+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:07:07.752+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:07:07.752+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:07:07.828+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:07:07.828+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag default_args. verify config is correct
[2025-02-25T19:07:07.829+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:07:07.845+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.098 seconds
[2025-02-25T19:07:44.967+0000] {processor.py:161} INFO - Started process (PID=66) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:07:44.969+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:07:44.970+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:07:44.969+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:07:45.149+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:07:45.148+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:07:45.149+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:07:45.160+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.197 seconds
[2025-02-25T19:08:15.314+0000] {processor.py:161} INFO - Started process (PID=78) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:08:15.315+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:08:15.317+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:08:15.317+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:08:15.479+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:08:15.478+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:08:15.479+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:08:15.487+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.177 seconds
[2025-02-25T19:08:45.759+0000] {processor.py:161} INFO - Started process (PID=85) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:08:45.760+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:08:45.762+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:08:45.762+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:08:45.909+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:08:45.908+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:08:45.909+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:08:45.922+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.168 seconds
[2025-02-25T19:09:16.092+0000] {processor.py:161} INFO - Started process (PID=92) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:09:16.093+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:09:16.095+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:09:16.095+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:09:16.256+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:09:16.255+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:09:16.256+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:09:16.268+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.181 seconds
[2025-02-25T19:09:46.725+0000] {processor.py:161} INFO - Started process (PID=99) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:09:46.726+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:09:46.728+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:09:46.728+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:09:46.794+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:09:46.793+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:09:46.794+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:09:46.803+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.082 seconds
[2025-02-25T19:10:17.129+0000] {processor.py:161} INFO - Started process (PID=106) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:10:17.130+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:10:17.133+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:10:17.133+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:10:17.198+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:10:17.198+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:10:17.199+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:10:17.208+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.084 seconds
[2025-02-25T19:10:47.513+0000] {processor.py:161} INFO - Started process (PID=113) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:10:47.514+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:10:47.517+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:10:47.517+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:10:47.584+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:10:47.583+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:10:47.584+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:10:47.592+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.083 seconds
[2025-02-25T19:11:17.916+0000] {processor.py:161} INFO - Started process (PID=120) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:11:17.917+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:11:17.921+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:11:17.920+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:11:17.985+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:11:17.985+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:11:17.986+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:11:17.999+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.088 seconds
[2025-02-25T19:11:48.300+0000] {processor.py:161} INFO - Started process (PID=127) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:11:48.301+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:11:48.303+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:11:48.303+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:11:48.359+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:11:48.358+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:11:48.359+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:11:48.373+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.076 seconds
[2025-02-25T19:12:18.677+0000] {processor.py:161} INFO - Started process (PID=134) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:12:18.678+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:12:18.680+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:12:18.680+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:12:18.740+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:12:18.739+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:12:18.740+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:12:18.751+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.080 seconds
[2025-02-25T19:12:49.065+0000] {processor.py:161} INFO - Started process (PID=141) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:12:49.066+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:12:49.069+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:12:49.069+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:12:49.135+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:12:49.134+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:12:49.135+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:12:49.149+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.088 seconds
[2025-02-25T19:13:19.530+0000] {processor.py:161} INFO - Started process (PID=148) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:13:19.531+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:13:19.533+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:13:19.533+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:13:19.600+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:13:19.600+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:13:19.600+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:13:19.609+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.084 seconds
[2025-02-25T19:13:49.972+0000] {processor.py:161} INFO - Started process (PID=155) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:13:49.973+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:13:49.976+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:13:49.975+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:13:50.043+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:13:50.043+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:13:50.043+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:13:50.057+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.090 seconds
[2025-02-25T19:14:20.446+0000] {processor.py:161} INFO - Started process (PID=162) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:14:20.447+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:14:20.450+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:14:20.450+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:14:20.516+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:14:20.515+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:14:20.516+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:14:20.531+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.089 seconds
[2025-02-25T19:14:50.915+0000] {processor.py:161} INFO - Started process (PID=169) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:14:50.916+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:14:50.921+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:14:50.921+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:14:50.998+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:14:50.998+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:14:50.998+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:14:51.008+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.095 seconds
[2025-02-25T19:15:21.309+0000] {processor.py:161} INFO - Started process (PID=176) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:15:21.310+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:15:21.311+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:15:21.311+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:15:21.362+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:15:21.361+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:15:21.362+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:15:21.373+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.066 seconds
[2025-02-25T19:15:51.729+0000] {processor.py:161} INFO - Started process (PID=182) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:15:51.729+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:15:51.730+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:15:51.730+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:15:51.781+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:15:51.780+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:15:51.781+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:15:51.791+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.064 seconds
[2025-02-25T19:16:22.193+0000] {processor.py:161} INFO - Started process (PID=189) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:16:22.194+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:16:22.197+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:16:22.197+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:16:22.265+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:16:22.264+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:16:22.265+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:16:22.275+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.087 seconds
[2025-02-25T19:16:52.648+0000] {processor.py:161} INFO - Started process (PID=196) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:16:52.649+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:16:52.652+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:16:52.651+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:16:52.718+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:16:52.717+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:16:52.718+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:16:52.729+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.086 seconds
[2025-02-25T19:17:23.102+0000] {processor.py:161} INFO - Started process (PID=203) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:17:23.103+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:17:23.106+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:17:23.106+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:17:23.174+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:17:23.173+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:17:23.174+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:17:23.189+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.092 seconds
[2025-02-25T19:17:53.611+0000] {processor.py:161} INFO - Started process (PID=210) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:17:53.612+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:17:53.614+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:17:53.613+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:17:53.681+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:17:53.681+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:17:53.682+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:17:53.692+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.085 seconds
[2025-02-25T19:18:24.138+0000] {processor.py:161} INFO - Started process (PID=217) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:18:24.138+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:18:24.141+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:18:24.141+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:18:24.206+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:18:24.206+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:18:24.206+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:18:24.219+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.086 seconds
[2025-02-25T19:18:54.557+0000] {processor.py:161} INFO - Started process (PID=224) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:18:54.558+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:18:54.560+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:18:54.560+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:18:54.628+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:18:54.627+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:18:54.628+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:18:54.639+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.087 seconds
[2025-02-25T19:19:25.033+0000] {processor.py:161} INFO - Started process (PID=231) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:19:25.034+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:19:25.036+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:19:25.036+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:19:25.104+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:19:25.103+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:19:25.104+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:19:25.116+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.087 seconds
[2025-02-25T19:19:55.531+0000] {processor.py:161} INFO - Started process (PID=238) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:19:55.531+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:19:55.534+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:19:55.534+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:19:55.599+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:19:55.599+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:19:55.599+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:19:55.611+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.085 seconds
[2025-02-25T19:20:26.081+0000] {processor.py:161} INFO - Started process (PID=245) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:20:26.082+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:20:26.085+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:20:26.084+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:20:26.153+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:20:26.152+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:20:26.153+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:20:26.162+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.086 seconds
[2025-02-25T19:20:56.537+0000] {processor.py:161} INFO - Started process (PID=252) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:20:56.538+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:20:56.541+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:20:56.540+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:20:56.608+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:20:56.607+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:20:56.608+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:20:56.620+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.087 seconds
[2025-02-25T19:21:26.994+0000] {processor.py:161} INFO - Started process (PID=259) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:21:26.995+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:21:26.998+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:21:26.997+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:21:27.065+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:21:27.064+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:21:27.065+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:21:27.077+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.087 seconds
[2025-02-25T19:21:57.390+0000] {processor.py:161} INFO - Started process (PID=266) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:21:57.390+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:21:57.392+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:21:57.392+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:21:57.452+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:21:57.451+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:21:57.452+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:21:57.462+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.077 seconds
[2025-02-25T19:22:27.855+0000] {processor.py:161} INFO - Started process (PID=273) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:22:27.855+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:22:27.859+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:22:27.858+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:22:27.923+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:22:27.922+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:22:27.923+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:22:27.936+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.090 seconds
[2025-02-25T19:22:58.366+0000] {processor.py:161} INFO - Started process (PID=280) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:22:58.367+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:22:58.369+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:22:58.369+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:22:58.436+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:22:58.436+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:22:58.437+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:22:58.448+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.085 seconds
[2025-02-25T19:23:28.884+0000] {processor.py:161} INFO - Started process (PID=287) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:23:28.885+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:23:28.888+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:23:28.888+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:23:28.960+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:23:28.959+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:23:28.960+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:23:28.971+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.092 seconds
[2025-02-25T19:23:59.432+0000] {processor.py:161} INFO - Started process (PID=294) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:23:59.433+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:23:59.436+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:23:59.436+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:23:59.508+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:23:59.508+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:23:59.508+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:23:59.519+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.092 seconds
[2025-02-25T19:24:29.885+0000] {processor.py:161} INFO - Started process (PID=301) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:24:29.886+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:24:29.889+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:24:29.889+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:24:29.956+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:24:29.955+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:24:29.956+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:24:29.965+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.085 seconds
[2025-02-25T19:25:00.288+0000] {processor.py:161} INFO - Started process (PID=308) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:25:00.289+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:25:00.290+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:25:00.290+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:25:00.340+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:25:00.339+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:25:00.340+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:25:00.352+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.069 seconds
[2025-02-25T19:25:30.935+0000] {processor.py:161} INFO - Started process (PID=315) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:25:30.935+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:25:30.937+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:25:30.936+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:25:30.987+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:25:30.986+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:25:30.987+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:25:30.999+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.066 seconds
[2025-02-25T19:26:01.513+0000] {processor.py:161} INFO - Started process (PID=322) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:26:01.514+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:26:01.516+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:26:01.516+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:26:01.584+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:26:01.583+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:26:01.584+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:26:01.599+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.092 seconds
[2025-02-25T19:26:32.022+0000] {processor.py:161} INFO - Started process (PID=329) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:26:32.023+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:26:32.024+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:26:32.024+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:26:32.080+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:26:32.079+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:26:32.080+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:26:32.096+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.079 seconds
[2025-02-25T19:27:02.488+0000] {processor.py:161} INFO - Started process (PID=336) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:27:02.488+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:27:02.490+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:27:02.490+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:27:02.554+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:27:02.554+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:27:02.554+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:27:02.565+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.082 seconds
[2025-02-25T19:27:33.041+0000] {processor.py:161} INFO - Started process (PID=343) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:27:33.042+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:27:33.044+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:27:33.043+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:27:33.113+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:27:33.113+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:27:33.114+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:27:33.126+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.089 seconds
[2025-02-25T19:28:03.690+0000] {processor.py:161} INFO - Started process (PID=350) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:28:03.691+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:28:03.693+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:28:03.693+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:28:03.767+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:28:03.766+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:28:03.767+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:28:03.778+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.094 seconds
[2025-02-25T19:28:34.177+0000] {processor.py:161} INFO - Started process (PID=357) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:28:34.178+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:28:34.178+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:28:34.178+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:28:34.230+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:28:34.229+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:28:34.230+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:28:34.244+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.068 seconds
[2025-02-25T19:29:04.902+0000] {processor.py:161} INFO - Started process (PID=364) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:29:04.902+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:29:04.904+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:29:04.903+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:29:04.955+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:29:04.954+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:29:04.955+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:29:04.965+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.065 seconds
[2025-02-25T19:29:35.414+0000] {processor.py:161} INFO - Started process (PID=371) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:29:35.414+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:29:35.416+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:29:35.415+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:29:35.511+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:29:35.510+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:29:35.511+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:29:35.532+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.121 seconds
[2025-02-25T19:30:05.838+0000] {processor.py:161} INFO - Started process (PID=378) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:30:05.839+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:30:05.842+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:30:05.842+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:30:05.909+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:30:05.908+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:30:05.909+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:30:05.921+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.087 seconds
[2025-02-25T19:30:36.342+0000] {processor.py:161} INFO - Started process (PID=385) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:30:36.343+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:30:36.346+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:30:36.345+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:30:36.411+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:30:36.411+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:30:36.411+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:30:36.422+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.085 seconds
[2025-02-25T19:31:06.817+0000] {processor.py:161} INFO - Started process (PID=392) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:31:06.817+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:31:06.819+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:31:06.818+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:31:06.871+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:31:06.870+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:31:06.871+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:31:06.887+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.072 seconds
[2025-02-25T19:31:37.190+0000] {processor.py:161} INFO - Started process (PID=399) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:31:37.191+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:31:37.194+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:31:37.194+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:31:37.260+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:31:37.259+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:31:37.260+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:31:37.271+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.085 seconds
[2025-02-25T19:32:07.820+0000] {processor.py:161} INFO - Started process (PID=406) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:32:07.821+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:32:07.824+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:32:07.823+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:32:07.890+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:32:07.889+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:32:07.890+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:32:07.900+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.085 seconds
[2025-02-25T19:32:38.266+0000] {processor.py:161} INFO - Started process (PID=414) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:32:38.267+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:32:38.270+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:32:38.270+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:32:38.338+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:32:38.337+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:32:38.338+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:32:38.350+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.088 seconds
[2025-02-25T19:33:08.694+0000] {processor.py:161} INFO - Started process (PID=421) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:33:08.694+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:33:08.697+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:33:08.697+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:33:08.767+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:33:08.767+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:33:08.768+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:33:08.778+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.089 seconds
[2025-02-25T19:33:39.356+0000] {processor.py:161} INFO - Started process (PID=428) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:33:39.357+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:33:39.359+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:33:39.359+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:33:39.421+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:33:39.420+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:33:39.421+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:33:39.431+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.080 seconds
[2025-02-25T19:34:09.900+0000] {processor.py:161} INFO - Started process (PID=435) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:34:09.901+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:34:09.903+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:34:09.903+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:34:09.968+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:34:09.967+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:34:09.968+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:34:09.980+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.084 seconds
[2025-02-25T19:34:40.339+0000] {processor.py:161} INFO - Started process (PID=442) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:34:40.340+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:34:40.343+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:34:40.342+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:34:40.409+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:34:40.409+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:34:40.409+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:34:40.420+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.086 seconds
[2025-02-25T19:35:10.781+0000] {processor.py:161} INFO - Started process (PID=449) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:35:10.782+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:35:10.784+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:35:10.783+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:35:10.858+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:35:10.858+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:35:10.859+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:35:10.869+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.093 seconds
[2025-02-25T19:35:41.226+0000] {processor.py:161} INFO - Started process (PID=456) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:35:41.227+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:35:41.230+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:35:41.230+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:35:41.300+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:35:41.299+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:35:41.300+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:35:41.315+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.094 seconds
[2025-02-25T19:36:11.852+0000] {processor.py:161} INFO - Started process (PID=463) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:36:11.853+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:36:11.855+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:36:11.855+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:36:11.924+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:36:11.923+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:36:11.924+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:36:11.935+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.088 seconds
[2025-02-25T19:36:42.574+0000] {processor.py:161} INFO - Started process (PID=470) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:36:42.575+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:36:42.578+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:36:42.577+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:36:42.647+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:36:42.646+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:36:42.647+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:36:42.660+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.091 seconds
[2025-02-25T19:37:12.979+0000] {processor.py:161} INFO - Started process (PID=477) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:37:12.980+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:37:12.982+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:37:12.982+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:37:13.051+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:37:13.050+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:37:13.051+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:37:13.072+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.097 seconds
[2025-02-25T19:37:43.386+0000] {processor.py:161} INFO - Started process (PID=484) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:37:43.387+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:37:43.388+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:37:43.388+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:37:43.394+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:37:43.393+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:37:43.394+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:37:43.408+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.023 seconds
[2025-02-25T19:38:14.827+0000] {processor.py:161} INFO - Started process (PID=66) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:38:14.828+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:38:14.829+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:38:14.829+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:38:14.990+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:38:14.990+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:38:14.991+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:38:14.999+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.174 seconds
[2025-02-25T19:38:45.203+0000] {processor.py:161} INFO - Started process (PID=79) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:38:45.203+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:38:45.206+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:38:45.205+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:38:45.354+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:38:45.353+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:38:45.354+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:38:45.362+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.164 seconds
[2025-02-25T19:39:15.646+0000] {processor.py:161} INFO - Started process (PID=86) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:39:15.647+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:39:15.649+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:39:15.649+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:39:15.790+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:39:15.789+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:39:15.790+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:39:15.798+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.156 seconds
[2025-02-25T19:39:46.015+0000] {processor.py:161} INFO - Started process (PID=93) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:39:46.016+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:39:46.018+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:39:46.018+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:39:46.176+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:39:46.175+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:39:46.176+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:39:46.190+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.178 seconds
[2025-02-25T19:40:16.644+0000] {processor.py:161} INFO - Started process (PID=100) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:40:16.645+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:40:16.648+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:40:16.647+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:40:16.713+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:40:16.713+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:40:16.713+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:40:16.728+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.089 seconds
[2025-02-25T19:40:47.126+0000] {processor.py:161} INFO - Started process (PID=107) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:40:47.127+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:40:47.130+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:40:47.130+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:40:47.200+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:40:47.199+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:40:47.200+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:40:47.210+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.090 seconds
[2025-02-25T19:41:17.518+0000] {processor.py:161} INFO - Started process (PID=114) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:41:17.518+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:41:17.520+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:41:17.520+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:41:17.527+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:41:17.526+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:41:17.528+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:41:17.540+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.026 seconds
[2025-02-25T19:41:48.690+0000] {processor.py:161} INFO - Started process (PID=121) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:41:48.693+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:41:48.696+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:41:48.696+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:41:48.704+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:41:48.703+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag default_args. verify config is correct
[2025-02-25T19:41:48.705+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:42:04.670+0000] {processor.py:161} INFO - Started process (PID=72) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:42:04.671+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:42:04.672+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:42:04.672+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:42:04.855+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:42:04.854+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag dags. verify config is correct
[2025-02-25T19:42:04.855+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:42:04.866+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.197 seconds
[2025-02-25T19:42:35.005+0000] {processor.py:161} INFO - Started process (PID=79) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:42:35.006+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:42:35.009+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:42:35.009+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:42:35.020+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:42:35.018+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag default_args. verify config is correct
[2025-02-25T19:42:35.020+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:42:35.042+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.041 seconds
[2025-02-25T19:43:05.343+0000] {processor.py:161} INFO - Started process (PID=86) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:43:05.344+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:43:05.345+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:43:05.345+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:43:05.351+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:43:05.350+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag default_args. verify config is correct
[2025-02-25T19:43:05.351+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:43:05.368+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.028 seconds
[2025-02-25T19:43:35.651+0000] {processor.py:161} INFO - Started process (PID=93) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:43:35.651+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:43:35.653+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:43:35.653+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:43:35.757+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:43:35.756+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 153, in build_dags
    dag: Dict[str, Union[str, DAG]] = dag_builder.build()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 757, in build
    dag_params: Dict[str, Any] = self.get_dag_params()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagbuilder.py", line 154, in get_dag_params
    if utils.check_dict_key(dag_params["default_args"], "end_date"):
KeyError: 'default_args'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 9, in <module>
    dag_factory.generate_dags(globals())
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 179, in generate_dags
    dags: Dict[str, Any] = self.build_dags()
  File "/home/airflow/.local/lib/python3.8/site-packages/dagfactory/dagfactory.py", line 156, in build_dags
    raise DagFactoryException(f"Failed to generate dag {dag_name}. verify config is correct") from err
dagfactory.exceptions.DagFactoryException: Failed to generate dag default_args. verify config is correct
[2025-02-25T19:43:35.757+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:43:35.767+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.120 seconds
[2025-02-25T19:43:45.985+0000] {processor.py:161} INFO - Started process (PID=94) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:43:45.985+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:43:45.987+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:43:45.987+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:43:46.001+0000] {logging_mixin.py:188} WARNING - /home/airflow/.local/lib/python3.8/site-packages/airflow/models/baseoperator.py:437 AirflowProviderDeprecationWarning: Class `SimpleHttpOperator` is deprecated and will be removed in a future release. Please use `HttpOperator` instead.
[2025-02-25T19:43:46.016+0000] {processor.py:840} INFO - DAG(s) 'dynamic_api_trigger' retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:43:46.192+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:43:46.192+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:dynamic_api_trigger
[2025-02-25T19:43:46.198+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:43:46.198+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:dynamic_api_trigger
[2025-02-25T19:43:46.202+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:43:46.202+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:dynamic_api_trigger
[2025-02-25T19:43:46.202+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:43:46.202+0000] {dag.py:3033} INFO - Sync 1 DAGs
[2025-02-25T19:43:46.208+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:43:46.208+0000] {dag.py:3055} INFO - Creating ORM DAG for dynamic_api_trigger
[2025-02-25T19:43:46.213+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:43:46.213+0000] {dag.py:3820} INFO - Setting next_dagrun for dynamic_api_trigger to 2025-02-25T00:00:00+00:00, run_after=2025-02-26T00:00:00+00:00
[2025-02-25T19:43:46.225+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.243 seconds
[2025-02-25T19:44:16.279+0000] {processor.py:161} INFO - Started process (PID=101) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:44:16.281+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:44:16.285+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:44:16.285+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:44:16.305+0000] {logging_mixin.py:188} WARNING - /home/airflow/.local/lib/python3.8/site-packages/airflow/models/baseoperator.py:437 AirflowProviderDeprecationWarning: Class `SimpleHttpOperator` is deprecated and will be removed in a future release. Please use `HttpOperator` instead.
[2025-02-25T19:44:16.312+0000] {processor.py:840} INFO - DAG(s) 'dynamic_api_trigger' retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:44:16.338+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:44:16.338+0000] {dag.py:3033} INFO - Sync 1 DAGs
[2025-02-25T19:44:16.356+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:44:16.356+0000] {dag.py:3820} INFO - Setting next_dagrun for dynamic_api_trigger to 2025-02-25T00:00:00+00:00, run_after=2025-02-26T00:00:00+00:00
[2025-02-25T19:44:16.377+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.102 seconds
[2025-02-25T19:44:57.851+0000] {processor.py:161} INFO - Started process (PID=71) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:44:57.852+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:44:57.853+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:44:57.853+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:44:57.861+0000] {logging_mixin.py:188} WARNING - /home/airflow/.local/lib/python3.8/site-packages/airflow/models/baseoperator.py:437 AirflowProviderDeprecationWarning: Class `SimpleHttpOperator` is deprecated and will be removed in a future release. Please use `HttpOperator` instead.
[2025-02-25T19:44:57.865+0000] {processor.py:840} INFO - DAG(s) 'dynamic_api_trigger' retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:44:57.925+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:44:57.925+0000] {dag.py:3033} INFO - Sync 1 DAGs
[2025-02-25T19:44:57.930+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:44:57.930+0000] {dag.py:3055} INFO - Creating ORM DAG for dynamic_api_trigger
[2025-02-25T19:44:57.935+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:44:57.935+0000] {dag.py:3820} INFO - Setting next_dagrun for dynamic_api_trigger to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:44:57.946+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.097 seconds
[2025-02-25T19:45:28.162+0000] {processor.py:161} INFO - Started process (PID=83) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:45:28.163+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:45:28.166+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:45:28.166+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:45:28.183+0000] {logging_mixin.py:188} WARNING - /home/airflow/.local/lib/python3.8/site-packages/airflow/models/baseoperator.py:437 AirflowProviderDeprecationWarning: Class `SimpleHttpOperator` is deprecated and will be removed in a future release. Please use `HttpOperator` instead.
[2025-02-25T19:45:28.188+0000] {processor.py:840} INFO - DAG(s) 'dynamic_api_trigger' retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:45:28.207+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:45:28.207+0000] {dag.py:3033} INFO - Sync 1 DAGs
[2025-02-25T19:45:28.219+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:45:28.219+0000] {dag.py:3820} INFO - Setting next_dagrun for dynamic_api_trigger to 2025-02-25T00:00:00+00:00, run_after=2025-02-26T00:00:00+00:00
[2025-02-25T19:45:28.232+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.075 seconds
[2025-02-25T19:45:58.561+0000] {processor.py:161} INFO - Started process (PID=90) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:45:58.562+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:45:58.565+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:45:58.564+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:45:58.581+0000] {logging_mixin.py:188} WARNING - /home/airflow/.local/lib/python3.8/site-packages/airflow/models/baseoperator.py:437 AirflowProviderDeprecationWarning: Class `SimpleHttpOperator` is deprecated and will be removed in a future release. Please use `HttpOperator` instead.
[2025-02-25T19:45:58.587+0000] {processor.py:840} INFO - DAG(s) 'dynamic_api_trigger' retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:45:58.610+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:45:58.610+0000] {dag.py:3033} INFO - Sync 1 DAGs
[2025-02-25T19:45:58.622+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:45:58.622+0000] {dag.py:3820} INFO - Setting next_dagrun for dynamic_api_trigger to 2025-02-25T00:00:00+00:00, run_after=2025-02-26T00:00:00+00:00
[2025-02-25T19:45:58.639+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.082 seconds
[2025-02-25T19:46:28.916+0000] {processor.py:161} INFO - Started process (PID=97) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:46:28.917+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:46:28.919+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:46:28.918+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:46:28.937+0000] {logging_mixin.py:188} WARNING - /home/airflow/.local/lib/python3.8/site-packages/airflow/models/baseoperator.py:437 AirflowProviderDeprecationWarning: Class `SimpleHttpOperator` is deprecated and will be removed in a future release. Please use `HttpOperator` instead.
[2025-02-25T19:46:28.944+0000] {processor.py:840} INFO - DAG(s) 'dynamic_api_trigger' retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:46:28.968+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:46:28.968+0000] {dag.py:3033} INFO - Sync 1 DAGs
[2025-02-25T19:46:28.984+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:46:28.983+0000] {dag.py:3820} INFO - Setting next_dagrun for dynamic_api_trigger to 2025-02-25T00:00:00+00:00, run_after=2025-02-26T00:00:00+00:00
[2025-02-25T19:46:28.999+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.086 seconds
[2025-02-25T19:46:59.273+0000] {processor.py:161} INFO - Started process (PID=104) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:46:59.274+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:46:59.275+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:46:59.275+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:46:59.280+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:46:59.280+0000] {dagbag.py:348} ERROR - Failed to import: /opt/airflow/dags/dynamic_api_trigger.py
Traceback (most recent call last):
  File "/home/airflow/.local/lib/python3.8/site-packages/airflow/models/dagbag.py", line 344, in parse
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 843, in exec_module
  File "<frozen importlib._bootstrap>", line 219, in _call_with_frames_removed
  File "/opt/airflow/dags/dynamic_api_trigger.py", line 18, in <module>
    dag_params = config["dags"]["dynamic_api_trigger"]
KeyError: 'dynamic_api_trigger'
[2025-02-25T19:46:59.280+0000] {processor.py:842} WARNING - No viable dags retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:46:59.299+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.028 seconds
[2025-02-25T19:47:01.304+0000] {processor.py:161} INFO - Started process (PID=105) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:47:01.305+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:47:01.308+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.307+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:47:01.318+0000] {logging_mixin.py:188} WARNING - /home/airflow/.local/lib/python3.8/site-packages/airflow/models/baseoperator.py:437 AirflowProviderDeprecationWarning: Class `SimpleHttpOperator` is deprecated and will be removed in a future release. Please use `HttpOperator` instead.
[2025-02-25T19:47:01.347+0000] {processor.py:840} INFO - DAG(s) 'silver_regulations_dag', 'bronze_loans_dag', 'bronze_payment_dag', 'gold_users_dag', 'bronze_users_dag', 'silver_merchants_dag', 'bronze_risk_assessments_dag', 'silver_payment_methods_dag', 'silver_credit_scores_dag', 'bronze_audits_dag', 'silver_loans_dag', 'silver_transactions_dag', 'gold_portfolios_dag', 'silver_risk_assessments_dag', 'bronze_subaccounts_dag', 'gold_regulations_dag', 'silver_user_verifications_dag', 'gold_user_verifications_dag', 'silver_claims_dag', 'gold_payment_methods_dag', 'silver_audits_dag', 'gold_entities_dag', 'bronze_insured_entities_dag', 'gold_subaccounts_dag', 'gold_insured_entities_dag', 'gold_audits_dag', 'bronze_accounts_dag', 'bronze_credit_scores_dag', 'bronze_merchants_dag', 'gold_policies_dag', 'gold_risk_assessments_dag', 'gold_transactions_dag', 'gold_payment_dag', 'bronze_payment_methods_dag', 'bronze_transactions_dag', 'silver_subaccounts_dag', 'gold_merchants_dag', 'bronze_claims_dag', 'gold_loans_dag', 'bronze_user_verifications_dag', 'gold_claims_dag', 'silver_insured_entities_dag', 'bronze_regulations_dag', 'bronze_entities_dag', 'silver_policies_dag', 'gold_credit_scores_dag', 'bronze_policies_dag', 'silver_payment_dag', 'silver_entities_dag', 'gold_accounts_dag', 'bronze_portfolios_dag', 'silver_accounts_dag', 'silver_users_dag', 'silver_portfolios_dag' retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:47:01.404+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.404+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:silver_regulations_dag
[2025-02-25T19:47:01.409+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.409+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:silver_regulations_dag
[2025-02-25T19:47:01.413+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.413+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:silver_regulations_dag
[2025-02-25T19:47:01.421+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.421+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:bronze_loans_dag
[2025-02-25T19:47:01.425+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.425+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:bronze_loans_dag
[2025-02-25T19:47:01.429+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.429+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:bronze_loans_dag
[2025-02-25T19:47:01.436+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.436+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:bronze_payment_dag
[2025-02-25T19:47:01.439+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.439+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:bronze_payment_dag
[2025-02-25T19:47:01.443+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.443+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:bronze_payment_dag
[2025-02-25T19:47:01.450+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.450+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:gold_users_dag
[2025-02-25T19:47:01.453+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.453+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:gold_users_dag
[2025-02-25T19:47:01.458+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.458+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:gold_users_dag
[2025-02-25T19:47:01.466+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.466+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:bronze_users_dag
[2025-02-25T19:47:01.470+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.470+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:bronze_users_dag
[2025-02-25T19:47:01.473+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.473+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:bronze_users_dag
[2025-02-25T19:47:01.480+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.480+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:silver_merchants_dag
[2025-02-25T19:47:01.483+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.483+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:silver_merchants_dag
[2025-02-25T19:47:01.488+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.488+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:silver_merchants_dag
[2025-02-25T19:47:01.496+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.496+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:bronze_risk_assessments_dag
[2025-02-25T19:47:01.500+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.500+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:bronze_risk_assessments_dag
[2025-02-25T19:47:01.504+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.504+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:bronze_risk_assessments_dag
[2025-02-25T19:47:01.511+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.510+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:silver_payment_methods_dag
[2025-02-25T19:47:01.513+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.513+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:silver_payment_methods_dag
[2025-02-25T19:47:01.517+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.517+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:silver_payment_methods_dag
[2025-02-25T19:47:01.523+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.523+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:silver_credit_scores_dag
[2025-02-25T19:47:01.527+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.526+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:silver_credit_scores_dag
[2025-02-25T19:47:01.531+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.531+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:silver_credit_scores_dag
[2025-02-25T19:47:01.538+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.538+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:bronze_audits_dag
[2025-02-25T19:47:01.542+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.541+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:bronze_audits_dag
[2025-02-25T19:47:01.545+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.545+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:bronze_audits_dag
[2025-02-25T19:47:01.553+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.553+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:silver_loans_dag
[2025-02-25T19:47:01.557+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.556+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:silver_loans_dag
[2025-02-25T19:47:01.560+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.560+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:silver_loans_dag
[2025-02-25T19:47:01.567+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.567+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:silver_transactions_dag
[2025-02-25T19:47:01.571+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.571+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:silver_transactions_dag
[2025-02-25T19:47:01.574+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.574+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:silver_transactions_dag
[2025-02-25T19:47:01.581+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.581+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:gold_portfolios_dag
[2025-02-25T19:47:01.585+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.585+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:gold_portfolios_dag
[2025-02-25T19:47:01.588+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.588+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:gold_portfolios_dag
[2025-02-25T19:47:01.594+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.594+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:silver_risk_assessments_dag
[2025-02-25T19:47:01.598+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.597+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:silver_risk_assessments_dag
[2025-02-25T19:47:01.601+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.601+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:silver_risk_assessments_dag
[2025-02-25T19:47:01.608+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.608+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:bronze_subaccounts_dag
[2025-02-25T19:47:01.612+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.612+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:bronze_subaccounts_dag
[2025-02-25T19:47:01.616+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.616+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:bronze_subaccounts_dag
[2025-02-25T19:47:01.623+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.622+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:gold_regulations_dag
[2025-02-25T19:47:01.626+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.626+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:gold_regulations_dag
[2025-02-25T19:47:01.630+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.630+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:gold_regulations_dag
[2025-02-25T19:47:01.637+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.636+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:silver_user_verifications_dag
[2025-02-25T19:47:01.640+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.640+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:silver_user_verifications_dag
[2025-02-25T19:47:01.644+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.644+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:silver_user_verifications_dag
[2025-02-25T19:47:01.652+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.651+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:gold_user_verifications_dag
[2025-02-25T19:47:01.655+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.655+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:gold_user_verifications_dag
[2025-02-25T19:47:01.658+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.658+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:gold_user_verifications_dag
[2025-02-25T19:47:01.665+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.665+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:silver_claims_dag
[2025-02-25T19:47:01.669+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.669+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:silver_claims_dag
[2025-02-25T19:47:01.673+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.673+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:silver_claims_dag
[2025-02-25T19:47:01.681+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.681+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:gold_payment_methods_dag
[2025-02-25T19:47:01.685+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.685+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:gold_payment_methods_dag
[2025-02-25T19:47:01.688+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.688+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:gold_payment_methods_dag
[2025-02-25T19:47:01.695+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.694+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:silver_audits_dag
[2025-02-25T19:47:01.698+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.698+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:silver_audits_dag
[2025-02-25T19:47:01.702+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.702+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:silver_audits_dag
[2025-02-25T19:47:01.710+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.710+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:gold_entities_dag
[2025-02-25T19:47:01.714+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.714+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:gold_entities_dag
[2025-02-25T19:47:01.718+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.718+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:gold_entities_dag
[2025-02-25T19:47:01.726+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.726+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:bronze_insured_entities_dag
[2025-02-25T19:47:01.731+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.731+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:bronze_insured_entities_dag
[2025-02-25T19:47:01.736+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.736+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:bronze_insured_entities_dag
[2025-02-25T19:47:01.743+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.743+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:gold_subaccounts_dag
[2025-02-25T19:47:01.747+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.747+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:gold_subaccounts_dag
[2025-02-25T19:47:01.750+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.750+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:gold_subaccounts_dag
[2025-02-25T19:47:01.757+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.757+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:gold_insured_entities_dag
[2025-02-25T19:47:01.761+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.761+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:gold_insured_entities_dag
[2025-02-25T19:47:01.765+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.765+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:gold_insured_entities_dag
[2025-02-25T19:47:01.771+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.771+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:gold_audits_dag
[2025-02-25T19:47:01.775+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.775+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:gold_audits_dag
[2025-02-25T19:47:01.779+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.778+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:gold_audits_dag
[2025-02-25T19:47:01.786+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.786+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:bronze_accounts_dag
[2025-02-25T19:47:01.790+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.790+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:bronze_accounts_dag
[2025-02-25T19:47:01.794+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.794+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:bronze_accounts_dag
[2025-02-25T19:47:01.803+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.802+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:bronze_credit_scores_dag
[2025-02-25T19:47:01.807+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.807+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:bronze_credit_scores_dag
[2025-02-25T19:47:01.811+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.811+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:bronze_credit_scores_dag
[2025-02-25T19:47:01.819+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.819+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:bronze_merchants_dag
[2025-02-25T19:47:01.823+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.823+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:bronze_merchants_dag
[2025-02-25T19:47:01.827+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.827+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:bronze_merchants_dag
[2025-02-25T19:47:01.835+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.834+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:gold_policies_dag
[2025-02-25T19:47:01.839+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.839+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:gold_policies_dag
[2025-02-25T19:47:01.843+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.843+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:gold_policies_dag
[2025-02-25T19:47:01.851+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.850+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:gold_risk_assessments_dag
[2025-02-25T19:47:01.855+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.855+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:gold_risk_assessments_dag
[2025-02-25T19:47:01.859+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.859+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:gold_risk_assessments_dag
[2025-02-25T19:47:01.866+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.866+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:gold_transactions_dag
[2025-02-25T19:47:01.870+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.870+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:gold_transactions_dag
[2025-02-25T19:47:01.873+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.873+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:gold_transactions_dag
[2025-02-25T19:47:01.881+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.881+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:gold_payment_dag
[2025-02-25T19:47:01.885+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.885+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:gold_payment_dag
[2025-02-25T19:47:01.888+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.888+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:gold_payment_dag
[2025-02-25T19:47:01.896+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.896+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:bronze_payment_methods_dag
[2025-02-25T19:47:01.900+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.900+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:bronze_payment_methods_dag
[2025-02-25T19:47:01.904+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.904+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:bronze_payment_methods_dag
[2025-02-25T19:47:01.912+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.912+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:bronze_transactions_dag
[2025-02-25T19:47:01.916+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.916+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:bronze_transactions_dag
[2025-02-25T19:47:01.919+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.919+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:bronze_transactions_dag
[2025-02-25T19:47:01.927+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.927+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:silver_subaccounts_dag
[2025-02-25T19:47:01.931+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.931+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:silver_subaccounts_dag
[2025-02-25T19:47:01.935+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.935+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:silver_subaccounts_dag
[2025-02-25T19:47:01.942+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.941+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:gold_merchants_dag
[2025-02-25T19:47:01.945+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.945+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:gold_merchants_dag
[2025-02-25T19:47:01.948+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.948+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:gold_merchants_dag
[2025-02-25T19:47:01.956+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.956+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:bronze_claims_dag
[2025-02-25T19:47:01.960+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.959+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:bronze_claims_dag
[2025-02-25T19:47:01.963+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.963+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:bronze_claims_dag
[2025-02-25T19:47:01.970+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.969+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:gold_loans_dag
[2025-02-25T19:47:01.973+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.973+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:gold_loans_dag
[2025-02-25T19:47:01.977+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.977+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:gold_loans_dag
[2025-02-25T19:47:01.985+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.985+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:bronze_user_verifications_dag
[2025-02-25T19:47:01.989+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.988+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:bronze_user_verifications_dag
[2025-02-25T19:47:01.992+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.992+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:bronze_user_verifications_dag
[2025-02-25T19:47:01.999+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:01.999+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:gold_claims_dag
[2025-02-25T19:47:02.002+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.002+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:gold_claims_dag
[2025-02-25T19:47:02.010+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.010+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:gold_claims_dag
[2025-02-25T19:47:02.017+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.017+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:silver_insured_entities_dag
[2025-02-25T19:47:02.021+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.020+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:silver_insured_entities_dag
[2025-02-25T19:47:02.024+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.024+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:silver_insured_entities_dag
[2025-02-25T19:47:02.032+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.032+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:bronze_regulations_dag
[2025-02-25T19:47:02.036+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.036+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:bronze_regulations_dag
[2025-02-25T19:47:02.041+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.041+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:bronze_regulations_dag
[2025-02-25T19:47:02.048+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.048+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:bronze_entities_dag
[2025-02-25T19:47:02.052+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.052+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:bronze_entities_dag
[2025-02-25T19:47:02.056+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.056+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:bronze_entities_dag
[2025-02-25T19:47:02.062+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.062+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:silver_policies_dag
[2025-02-25T19:47:02.066+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.066+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:silver_policies_dag
[2025-02-25T19:47:02.069+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.069+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:silver_policies_dag
[2025-02-25T19:47:02.076+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.076+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:gold_credit_scores_dag
[2025-02-25T19:47:02.080+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.080+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:gold_credit_scores_dag
[2025-02-25T19:47:02.083+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.083+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:gold_credit_scores_dag
[2025-02-25T19:47:02.090+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.090+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:bronze_policies_dag
[2025-02-25T19:47:02.093+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.093+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:bronze_policies_dag
[2025-02-25T19:47:02.096+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.096+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:bronze_policies_dag
[2025-02-25T19:47:02.104+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.104+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:silver_payment_dag
[2025-02-25T19:47:02.108+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.108+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:silver_payment_dag
[2025-02-25T19:47:02.113+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.112+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:silver_payment_dag
[2025-02-25T19:47:02.123+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.123+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:silver_entities_dag
[2025-02-25T19:47:02.127+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.127+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:silver_entities_dag
[2025-02-25T19:47:02.131+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.131+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:silver_entities_dag
[2025-02-25T19:47:02.138+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.138+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:gold_accounts_dag
[2025-02-25T19:47:02.142+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.142+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:gold_accounts_dag
[2025-02-25T19:47:02.146+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.146+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:gold_accounts_dag
[2025-02-25T19:47:02.153+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.152+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:bronze_portfolios_dag
[2025-02-25T19:47:02.156+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.156+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:bronze_portfolios_dag
[2025-02-25T19:47:02.159+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.159+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:bronze_portfolios_dag
[2025-02-25T19:47:02.166+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.166+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:silver_accounts_dag
[2025-02-25T19:47:02.169+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.169+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:silver_accounts_dag
[2025-02-25T19:47:02.173+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.173+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:silver_accounts_dag
[2025-02-25T19:47:02.180+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.180+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:silver_users_dag
[2025-02-25T19:47:02.184+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.184+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:silver_users_dag
[2025-02-25T19:47:02.188+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.188+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:silver_users_dag
[2025-02-25T19:47:02.195+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.194+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:silver_portfolios_dag
[2025-02-25T19:47:02.198+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.198+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:silver_portfolios_dag
[2025-02-25T19:47:02.202+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.202+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:silver_portfolios_dag
[2025-02-25T19:47:02.202+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.202+0000] {dag.py:3033} INFO - Sync 54 DAGs
[2025-02-25T19:47:02.207+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.207+0000] {dag.py:3055} INFO - Creating ORM DAG for silver_transactions_dag
[2025-02-25T19:47:02.207+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.207+0000] {dag.py:3055} INFO - Creating ORM DAG for gold_payment_dag
[2025-02-25T19:47:02.208+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.207+0000] {dag.py:3055} INFO - Creating ORM DAG for bronze_policies_dag
[2025-02-25T19:47:02.208+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.208+0000] {dag.py:3055} INFO - Creating ORM DAG for silver_audits_dag
[2025-02-25T19:47:02.208+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.208+0000] {dag.py:3055} INFO - Creating ORM DAG for bronze_accounts_dag
[2025-02-25T19:47:02.208+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.208+0000] {dag.py:3055} INFO - Creating ORM DAG for silver_portfolios_dag
[2025-02-25T19:47:02.208+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.208+0000] {dag.py:3055} INFO - Creating ORM DAG for silver_policies_dag
[2025-02-25T19:47:02.208+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.208+0000] {dag.py:3055} INFO - Creating ORM DAG for bronze_payment_dag
[2025-02-25T19:47:02.208+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.208+0000] {dag.py:3055} INFO - Creating ORM DAG for bronze_entities_dag
[2025-02-25T19:47:02.209+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.209+0000] {dag.py:3055} INFO - Creating ORM DAG for silver_loans_dag
[2025-02-25T19:47:02.209+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.209+0000] {dag.py:3055} INFO - Creating ORM DAG for silver_subaccounts_dag
[2025-02-25T19:47:02.209+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.209+0000] {dag.py:3055} INFO - Creating ORM DAG for gold_merchants_dag
[2025-02-25T19:47:02.209+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.209+0000] {dag.py:3055} INFO - Creating ORM DAG for silver_user_verifications_dag
[2025-02-25T19:47:02.209+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.209+0000] {dag.py:3055} INFO - Creating ORM DAG for bronze_merchants_dag
[2025-02-25T19:47:02.209+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.209+0000] {dag.py:3055} INFO - Creating ORM DAG for bronze_user_verifications_dag
[2025-02-25T19:47:02.209+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.209+0000] {dag.py:3055} INFO - Creating ORM DAG for silver_risk_assessments_dag
[2025-02-25T19:47:02.210+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.210+0000] {dag.py:3055} INFO - Creating ORM DAG for gold_regulations_dag
[2025-02-25T19:47:02.210+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.210+0000] {dag.py:3055} INFO - Creating ORM DAG for gold_users_dag
[2025-02-25T19:47:02.210+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.210+0000] {dag.py:3055} INFO - Creating ORM DAG for bronze_subaccounts_dag
[2025-02-25T19:47:02.210+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.210+0000] {dag.py:3055} INFO - Creating ORM DAG for silver_regulations_dag
[2025-02-25T19:47:02.210+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.210+0000] {dag.py:3055} INFO - Creating ORM DAG for bronze_loans_dag
[2025-02-25T19:47:02.210+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.210+0000] {dag.py:3055} INFO - Creating ORM DAG for bronze_risk_assessments_dag
[2025-02-25T19:47:02.211+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.211+0000] {dag.py:3055} INFO - Creating ORM DAG for silver_entities_dag
[2025-02-25T19:47:02.211+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.211+0000] {dag.py:3055} INFO - Creating ORM DAG for bronze_audits_dag
[2025-02-25T19:47:02.211+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.211+0000] {dag.py:3055} INFO - Creating ORM DAG for bronze_regulations_dag
[2025-02-25T19:47:02.211+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.211+0000] {dag.py:3055} INFO - Creating ORM DAG for gold_entities_dag
[2025-02-25T19:47:02.211+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.211+0000] {dag.py:3055} INFO - Creating ORM DAG for bronze_insured_entities_dag
[2025-02-25T19:47:02.211+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.211+0000] {dag.py:3055} INFO - Creating ORM DAG for gold_audits_dag
[2025-02-25T19:47:02.211+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.211+0000] {dag.py:3055} INFO - Creating ORM DAG for silver_accounts_dag
[2025-02-25T19:47:02.212+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.212+0000] {dag.py:3055} INFO - Creating ORM DAG for bronze_claims_dag
[2025-02-25T19:47:02.212+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.212+0000] {dag.py:3055} INFO - Creating ORM DAG for bronze_payment_methods_dag
[2025-02-25T19:47:02.212+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.212+0000] {dag.py:3055} INFO - Creating ORM DAG for silver_credit_scores_dag
[2025-02-25T19:47:02.212+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.212+0000] {dag.py:3055} INFO - Creating ORM DAG for gold_payment_methods_dag
[2025-02-25T19:47:02.212+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.212+0000] {dag.py:3055} INFO - Creating ORM DAG for bronze_credit_scores_dag
[2025-02-25T19:47:02.212+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.212+0000] {dag.py:3055} INFO - Creating ORM DAG for gold_credit_scores_dag
[2025-02-25T19:47:02.212+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.212+0000] {dag.py:3055} INFO - Creating ORM DAG for silver_payment_dag
[2025-02-25T19:47:02.213+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.213+0000] {dag.py:3055} INFO - Creating ORM DAG for gold_policies_dag
[2025-02-25T19:47:02.213+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.213+0000] {dag.py:3055} INFO - Creating ORM DAG for bronze_transactions_dag
[2025-02-25T19:47:02.213+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.213+0000] {dag.py:3055} INFO - Creating ORM DAG for gold_risk_assessments_dag
[2025-02-25T19:47:02.213+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.213+0000] {dag.py:3055} INFO - Creating ORM DAG for silver_users_dag
[2025-02-25T19:47:02.213+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.213+0000] {dag.py:3055} INFO - Creating ORM DAG for silver_payment_methods_dag
[2025-02-25T19:47:02.213+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.213+0000] {dag.py:3055} INFO - Creating ORM DAG for gold_claims_dag
[2025-02-25T19:47:02.214+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.213+0000] {dag.py:3055} INFO - Creating ORM DAG for gold_accounts_dag
[2025-02-25T19:47:02.214+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.214+0000] {dag.py:3055} INFO - Creating ORM DAG for gold_insured_entities_dag
[2025-02-25T19:47:02.214+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.214+0000] {dag.py:3055} INFO - Creating ORM DAG for gold_portfolios_dag
[2025-02-25T19:47:02.214+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.214+0000] {dag.py:3055} INFO - Creating ORM DAG for silver_insured_entities_dag
[2025-02-25T19:47:02.214+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.214+0000] {dag.py:3055} INFO - Creating ORM DAG for gold_transactions_dag
[2025-02-25T19:47:02.214+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.214+0000] {dag.py:3055} INFO - Creating ORM DAG for silver_merchants_dag
[2025-02-25T19:47:02.215+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.214+0000] {dag.py:3055} INFO - Creating ORM DAG for gold_user_verifications_dag
[2025-02-25T19:47:02.215+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.215+0000] {dag.py:3055} INFO - Creating ORM DAG for silver_claims_dag
[2025-02-25T19:47:02.215+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.215+0000] {dag.py:3055} INFO - Creating ORM DAG for bronze_portfolios_dag
[2025-02-25T19:47:02.215+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.215+0000] {dag.py:3055} INFO - Creating ORM DAG for bronze_users_dag
[2025-02-25T19:47:02.215+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.215+0000] {dag.py:3055} INFO - Creating ORM DAG for gold_subaccounts_dag
[2025-02-25T19:47:02.215+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.215+0000] {dag.py:3055} INFO - Creating ORM DAG for gold_loans_dag
[2025-02-25T19:47:02.220+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.220+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_accounts_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.220+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.220+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_audits_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.221+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.221+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_claims_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.222+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.222+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_credit_scores_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.222+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.222+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_entities_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.223+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.223+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_insured_entities_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.224+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.224+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_loans_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.225+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.224+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_merchants_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.225+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.225+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_payment_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.226+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.226+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_payment_methods_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.226+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.226+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_policies_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.227+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.227+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_portfolios_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.227+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.227+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_regulations_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.228+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.228+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_risk_assessments_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.229+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.229+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_subaccounts_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.229+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.229+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_transactions_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.230+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.230+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_user_verifications_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.230+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.230+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_users_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.231+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.231+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_accounts_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.231+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.231+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_audits_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.232+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.232+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_claims_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.233+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.233+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_credit_scores_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.233+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.233+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_entities_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.234+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.234+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_insured_entities_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.234+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.234+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_loans_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.235+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.235+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_merchants_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.235+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.235+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_payment_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.236+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.236+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_payment_methods_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.237+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.237+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_policies_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.237+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.237+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_portfolios_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.238+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.238+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_regulations_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.238+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.238+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_risk_assessments_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.239+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.239+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_subaccounts_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.240+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.239+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_transactions_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.240+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.240+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_user_verifications_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.241+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.241+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_users_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.241+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.241+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_accounts_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.242+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.242+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_audits_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.242+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.242+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_claims_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.243+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.243+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_credit_scores_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.244+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.243+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_entities_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.244+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.244+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_insured_entities_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.245+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.245+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_loans_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.245+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.245+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_merchants_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.246+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.246+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_payment_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.246+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.246+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_payment_methods_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.247+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.247+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_policies_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.248+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.247+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_portfolios_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.248+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.248+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_regulations_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.249+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.249+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_risk_assessments_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.249+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.249+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_subaccounts_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.250+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.250+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_transactions_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.250+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.250+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_user_verifications_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.251+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:02.251+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_users_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:02.269+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.969 seconds
[2025-02-25T19:47:06.329+0000] {processor.py:161} INFO - Started process (PID=112) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:47:06.331+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:47:06.333+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.333+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:47:06.350+0000] {logging_mixin.py:188} WARNING - /home/airflow/.local/lib/python3.8/site-packages/airflow/models/baseoperator.py:437 AirflowProviderDeprecationWarning: Class `SimpleHttpOperator` is deprecated and will be removed in a future release. Please use `HttpOperator` instead.
[2025-02-25T19:47:06.384+0000] {processor.py:840} INFO - DAG(s) 'bronze_credit_scores_dag', 'silver_payment_methods_dag', 'gold_regulations_dag', 'silver_insured_entities_dag', 'silver_payment_dag', 'gold_entities_dag', 'silver_user_verifications_dag', 'silver_portfolios_dag', 'silver_merchants_dag', 'bronze_insured_entities_dag', 'bronze_merchants_dag', 'bronze_loans_dag', 'bronze_accounts_dag', 'silver_transactions_dag', 'gold_transactions_dag', 'bronze_user_verifications_dag', 'bronze_transactions_dag', 'bronze_risk_assessments_dag', 'gold_risk_assessments_dag', 'bronze_audits_dag', 'bronze_portfolios_dag', 'gold_audits_dag', 'bronze_payment_methods_dag', 'silver_entities_dag', 'silver_claims_dag', 'silver_policies_dag', 'gold_subaccounts_dag', 'silver_regulations_dag', 'silver_subaccounts_dag', 'gold_users_dag', 'gold_portfolios_dag', 'silver_loans_dag', 'silver_users_dag', 'gold_user_verifications_dag', 'gold_accounts_dag', 'silver_audits_dag', 'silver_credit_scores_dag', 'gold_claims_dag', 'bronze_entities_dag', 'gold_payment_methods_dag', 'bronze_regulations_dag', 'gold_merchants_dag', 'bronze_users_dag', 'gold_policies_dag', 'bronze_payment_dag', 'bronze_claims_dag', 'gold_credit_scores_dag', 'bronze_policies_dag', 'gold_insured_entities_dag', 'silver_risk_assessments_dag', 'gold_loans_dag', 'silver_accounts_dag', 'gold_payment_dag', 'bronze_subaccounts_dag' retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:47:06.401+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.400+0000] {dag.py:3033} INFO - Sync 54 DAGs
[2025-02-25T19:47:06.415+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.415+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_accounts_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.418+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.417+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_audits_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.419+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.419+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_claims_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.419+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.419+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_credit_scores_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.420+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.420+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_entities_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.421+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.421+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_insured_entities_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.422+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.422+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_loans_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.423+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.422+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_merchants_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.423+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.423+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_payment_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.424+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.424+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_payment_methods_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.425+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.425+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_policies_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.426+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.426+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_portfolios_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.426+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.426+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_regulations_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.427+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.427+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_risk_assessments_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.428+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.428+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_subaccounts_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.429+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.429+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_transactions_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.430+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.430+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_user_verifications_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.431+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.431+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_users_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.432+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.431+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_accounts_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.432+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.432+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_audits_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.433+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.433+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_claims_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.434+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.434+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_credit_scores_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.435+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.435+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_entities_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.435+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.435+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_insured_entities_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.436+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.436+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_loans_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.437+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.437+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_merchants_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.438+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.438+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_payment_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.439+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.439+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_payment_methods_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.439+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.439+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_policies_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.440+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.440+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_portfolios_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.441+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.441+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_regulations_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.442+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.442+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_risk_assessments_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.442+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.442+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_subaccounts_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.443+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.443+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_transactions_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.444+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.444+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_user_verifications_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.445+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.445+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_users_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.445+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.445+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_accounts_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.446+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.446+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_audits_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.447+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.447+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_claims_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.448+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.448+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_credit_scores_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.449+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.449+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_entities_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.449+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.449+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_insured_entities_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.450+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.450+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_loans_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.451+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.451+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_merchants_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.452+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.452+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_payment_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.452+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.452+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_payment_methods_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.453+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.453+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_policies_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.454+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.454+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_portfolios_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.455+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.455+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_regulations_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.456+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.456+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_risk_assessments_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.457+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.457+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_subaccounts_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.457+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.457+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_transactions_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.458+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.458+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_user_verifications_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.459+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:06.459+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_users_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:06.473+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.148 seconds
[2025-02-25T19:47:26.519+0000] {processor.py:161} INFO - Started process (PID=71) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:47:26.519+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:47:26.521+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.520+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:47:26.531+0000] {logging_mixin.py:188} WARNING - /home/airflow/.local/lib/python3.8/site-packages/airflow/models/baseoperator.py:437 AirflowProviderDeprecationWarning: Class `SimpleHttpOperator` is deprecated and will be removed in a future release. Please use `HttpOperator` instead.
[2025-02-25T19:47:26.560+0000] {processor.py:840} INFO - DAG(s) 'bronze_payment_dag', 'silver_entities_dag', 'bronze_transactions_dag', 'silver_payment_dag', 'gold_insured_entities_dag', 'bronze_risk_assessments_dag', 'silver_transactions_dag', 'gold_credit_scores_dag', 'bronze_claims_dag', 'gold_regulations_dag', 'bronze_payment_methods_dag', 'gold_merchants_dag', 'bronze_merchants_dag', 'bronze_credit_scores_dag', 'gold_payment_dag', 'bronze_entities_dag', 'bronze_insured_entities_dag', 'silver_credit_scores_dag', 'gold_policies_dag', 'silver_payment_methods_dag', 'gold_portfolios_dag', 'gold_risk_assessments_dag', 'silver_accounts_dag', 'bronze_user_verifications_dag', 'gold_subaccounts_dag', 'bronze_audits_dag', 'silver_user_verifications_dag', 'gold_transactions_dag', 'bronze_accounts_dag', 'bronze_loans_dag', 'gold_payment_methods_dag', 'silver_users_dag', 'gold_users_dag', 'gold_user_verifications_dag', 'gold_entities_dag', 'silver_risk_assessments_dag', 'silver_audits_dag', 'silver_portfolios_dag', 'gold_loans_dag', 'gold_accounts_dag', 'bronze_regulations_dag', 'bronze_subaccounts_dag', 'silver_policies_dag', 'bronze_portfolios_dag', 'silver_regulations_dag', 'silver_merchants_dag', 'gold_audits_dag', 'silver_insured_entities_dag', 'bronze_policies_dag', 'silver_claims_dag', 'gold_claims_dag', 'bronze_users_dag', 'silver_loans_dag', 'silver_subaccounts_dag' retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:47:26.866+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.865+0000] {dag.py:3033} INFO - Sync 54 DAGs
[2025-02-25T19:47:26.882+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.882+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_accounts_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.884+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.884+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_audits_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.886+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.886+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_claims_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.887+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.887+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_credit_scores_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.888+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.888+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_entities_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.889+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.889+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_insured_entities_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.890+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.890+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_loans_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.892+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.891+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_merchants_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.893+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.893+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_payment_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.894+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.894+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_payment_methods_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.895+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.895+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_policies_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.896+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.896+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_portfolios_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.897+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.897+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_regulations_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.898+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.898+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_risk_assessments_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.899+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.899+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_subaccounts_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.900+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.900+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_transactions_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.902+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.902+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_user_verifications_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.903+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.903+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_users_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.904+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.904+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_accounts_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.905+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.905+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_audits_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.906+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.906+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_claims_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.907+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.907+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_credit_scores_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.908+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.908+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_entities_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.910+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.910+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_insured_entities_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.912+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.912+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_loans_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.916+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.916+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_merchants_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.918+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.917+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_payment_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.919+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.919+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_payment_methods_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.920+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.920+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_policies_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.921+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.921+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_portfolios_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.922+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.922+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_regulations_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.924+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.924+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_risk_assessments_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.925+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.925+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_subaccounts_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.926+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.926+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_transactions_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.927+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.927+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_user_verifications_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.929+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.928+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_users_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.930+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.930+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_accounts_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.931+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.931+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_audits_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.932+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.932+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_claims_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.933+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.933+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_credit_scores_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.934+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.934+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_entities_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.935+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.935+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_insured_entities_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.936+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.936+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_loans_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.938+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.937+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_merchants_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.939+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.939+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_payment_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.940+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.940+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_payment_methods_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.941+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.941+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_policies_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.942+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.942+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_portfolios_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.943+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.943+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_regulations_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.944+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.944+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_risk_assessments_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.945+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.945+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_subaccounts_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.946+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.946+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_transactions_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.947+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.947+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_user_verifications_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.948+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:26.948+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_users_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:26.973+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.456 seconds
[2025-02-25T19:47:57.281+0000] {processor.py:161} INFO - Started process (PID=78) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:47:57.284+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:47:57.287+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.287+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:47:57.301+0000] {logging_mixin.py:188} WARNING - /home/airflow/.local/lib/python3.8/site-packages/airflow/models/baseoperator.py:437 AirflowProviderDeprecationWarning: Class `SimpleHttpOperator` is deprecated and will be removed in a future release. Please use `HttpOperator` instead.
[2025-02-25T19:47:57.328+0000] {processor.py:840} INFO - DAG(s) 'gold_users_dag', 'silver_audits_dag', 'gold_portfolios_dag', 'gold_claims_dag', 'bronze_payment_dag', 'silver_accounts_dag', 'bronze_user_verifications_dag', 'silver_users_dag', 'gold_loans_dag', 'silver_regulations_dag', 'gold_entities_dag', 'silver_portfolios_dag', 'silver_payment_methods_dag', 'bronze_portfolios_dag', 'silver_payment_dag', 'silver_transactions_dag', 'bronze_payment_methods_dag', 'silver_risk_assessments_dag', 'silver_insured_entities_dag', 'bronze_credit_scores_dag', 'gold_transactions_dag', 'bronze_risk_assessments_dag', 'bronze_entities_dag', 'silver_policies_dag', 'bronze_loans_dag', 'bronze_regulations_dag', 'silver_subaccounts_dag', 'gold_payment_methods_dag', 'gold_insured_entities_dag', 'silver_merchants_dag', 'bronze_audits_dag', 'bronze_claims_dag', 'gold_audits_dag', 'bronze_merchants_dag', 'bronze_policies_dag', 'gold_credit_scores_dag', 'gold_merchants_dag', 'gold_subaccounts_dag', 'gold_user_verifications_dag', 'silver_user_verifications_dag', 'gold_accounts_dag', 'silver_loans_dag', 'gold_policies_dag', 'bronze_transactions_dag', 'bronze_subaccounts_dag', 'silver_credit_scores_dag', 'gold_regulations_dag', 'bronze_insured_entities_dag', 'silver_claims_dag', 'gold_payment_dag', 'gold_risk_assessments_dag', 'silver_entities_dag', 'bronze_accounts_dag', 'bronze_users_dag' retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:47:57.394+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.394+0000] {dag.py:3033} INFO - Sync 54 DAGs
[2025-02-25T19:47:57.407+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.407+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_accounts_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.409+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.409+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_audits_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.410+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.410+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_claims_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.411+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.411+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_credit_scores_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.412+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.411+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_entities_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.412+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.412+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_insured_entities_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.413+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.413+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_loans_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.414+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.414+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_merchants_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.415+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.415+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_payment_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.415+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.415+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_payment_methods_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.416+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.416+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_policies_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.417+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.417+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_portfolios_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.418+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.418+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_regulations_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.418+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.418+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_risk_assessments_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.419+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.419+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_subaccounts_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.420+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.420+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_transactions_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.421+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.421+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_user_verifications_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.422+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.422+0000] {dag.py:3820} INFO - Setting next_dagrun for bronze_users_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.422+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.422+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_accounts_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.423+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.423+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_audits_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.424+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.424+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_claims_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.425+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.425+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_credit_scores_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.425+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.425+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_entities_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.426+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.426+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_insured_entities_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.427+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.427+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_loans_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.428+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.428+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_merchants_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.428+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.428+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_payment_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.429+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.429+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_payment_methods_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.430+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.430+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_policies_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.431+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.431+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_portfolios_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.432+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.431+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_regulations_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.432+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.432+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_risk_assessments_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.433+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.433+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_subaccounts_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.434+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.434+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_transactions_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.435+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.435+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_user_verifications_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.435+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.435+0000] {dag.py:3820} INFO - Setting next_dagrun for gold_users_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.436+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.436+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_accounts_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.437+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.437+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_audits_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.438+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.438+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_claims_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.438+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.438+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_credit_scores_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.439+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.439+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_entities_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.440+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.440+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_insured_entities_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.442+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.442+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_loans_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.448+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.448+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_merchants_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.448+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.448+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_payment_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.449+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.449+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_payment_methods_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.450+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.450+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_policies_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.451+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.451+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_portfolios_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.452+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.452+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_regulations_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.452+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.452+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_risk_assessments_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.453+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.453+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_subaccounts_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.454+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.454+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_transactions_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.455+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.455+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_user_verifications_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.456+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:47:57.456+0000] {dag.py:3820} INFO - Setting next_dagrun for silver_users_dag to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:47:57.468+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.190 seconds
[2025-02-25T19:48:24.604+0000] {processor.py:161} INFO - Started process (PID=85) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:48:24.605+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:48:24.608+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.607+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:48:24.618+0000] {logging_mixin.py:188} WARNING - /home/airflow/.local/lib/python3.8/site-packages/airflow/models/baseoperator.py:437 AirflowProviderDeprecationWarning: Class `SimpleHttpOperator` is deprecated and will be removed in a future release. Please use `HttpOperator` instead.
[2025-02-25T19:48:24.649+0000] {processor.py:840} INFO - DAG(s) 'load_silver_entities', 'load_silver_users', 'load_silver_portfolios', 'load_silver_subaccounts', 'load_gold_credit_scores', 'load_silver_risk_assessments', 'load_silver_claims', 'load_gold_transactions', 'load_bronze_accounts_created', 'load_gold_risk_assessments', 'load_silver_payment', 'load_gold_insured_entities', 'load_gold_payment', 'load_silver_payment_methods', 'load_bronze_risk_assessments', 'load_gold_entities', 'load_bronze_claims', 'load_silver_regulations', 'load_gold_subaccounts', 'load_gold_merchants', 'load_silver_transactions', 'load_gold_loans', 'load_bronze_subaccounts', 'load_bronze_user_verifications', 'load_bronze_payment_methods', 'load_bronze_regulations', 'load_bronze_loans', 'load_bronze_insured_entities', 'load_gold_accounts', 'load_silver_audits', 'load_bronze_users', 'load_gold_users', 'load_bronze_accounts_deleted', 'load_gold_portfolios', 'load_bronze_credit_scores', 'load_bronze_portfolios', 'load_silver_policies', 'load_silver_loans', 'load_silver_merchants', 'load_silver_insured_entities', 'load_bronze_accounts_updated', 'load_silver_accounts', 'load_silver_user_verifications', 'load_gold_regulations', 'load_gold_policies', 'load_bronze_merchants', 'load_bronze_transactions', 'load_gold_claims', 'load_gold_payment_methods', 'load_gold_audits', 'load_bronze_entities', 'load_bronze_policies', 'load_bronze_audits', 'load_gold_user_verifications', 'load_bronze_payment', 'load_silver_credit_scores' retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:48:24.735+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.735+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_silver_entities
[2025-02-25T19:48:24.741+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.741+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_silver_entities
[2025-02-25T19:48:24.746+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.745+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_silver_entities
[2025-02-25T19:48:24.753+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.753+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_silver_users
[2025-02-25T19:48:24.757+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.757+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_silver_users
[2025-02-25T19:48:24.761+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.761+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_silver_users
[2025-02-25T19:48:24.769+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.769+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_silver_portfolios
[2025-02-25T19:48:24.773+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.773+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_silver_portfolios
[2025-02-25T19:48:24.777+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.777+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_silver_portfolios
[2025-02-25T19:48:24.785+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.785+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_silver_subaccounts
[2025-02-25T19:48:24.789+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.789+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_silver_subaccounts
[2025-02-25T19:48:24.793+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.793+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_silver_subaccounts
[2025-02-25T19:48:24.801+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.801+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_gold_credit_scores
[2025-02-25T19:48:24.805+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.805+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_gold_credit_scores
[2025-02-25T19:48:24.810+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.810+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_gold_credit_scores
[2025-02-25T19:48:24.818+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.818+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_silver_risk_assessments
[2025-02-25T19:48:24.822+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.822+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_silver_risk_assessments
[2025-02-25T19:48:24.826+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.826+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_silver_risk_assessments
[2025-02-25T19:48:24.835+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.835+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_silver_claims
[2025-02-25T19:48:24.839+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.839+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_silver_claims
[2025-02-25T19:48:24.843+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.843+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_silver_claims
[2025-02-25T19:48:24.851+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.851+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_gold_transactions
[2025-02-25T19:48:24.855+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.855+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_gold_transactions
[2025-02-25T19:48:24.860+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.859+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_gold_transactions
[2025-02-25T19:48:24.867+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.867+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_bronze_accounts_created
[2025-02-25T19:48:24.871+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.871+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_bronze_accounts_created
[2025-02-25T19:48:24.875+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.875+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_bronze_accounts_created
[2025-02-25T19:48:24.882+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.882+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_gold_risk_assessments
[2025-02-25T19:48:24.886+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.886+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_gold_risk_assessments
[2025-02-25T19:48:24.890+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.889+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_gold_risk_assessments
[2025-02-25T19:48:24.897+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.897+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_silver_payment
[2025-02-25T19:48:24.901+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.901+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_silver_payment
[2025-02-25T19:48:24.904+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.904+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_silver_payment
[2025-02-25T19:48:24.912+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.912+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_gold_insured_entities
[2025-02-25T19:48:24.916+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.916+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_gold_insured_entities
[2025-02-25T19:48:24.919+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.919+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_gold_insured_entities
[2025-02-25T19:48:24.927+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.927+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_gold_payment
[2025-02-25T19:48:24.931+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.931+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_gold_payment
[2025-02-25T19:48:24.935+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.935+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_gold_payment
[2025-02-25T19:48:24.942+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.942+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_silver_payment_methods
[2025-02-25T19:48:24.946+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.946+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_silver_payment_methods
[2025-02-25T19:48:24.949+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.949+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_silver_payment_methods
[2025-02-25T19:48:24.956+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.956+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_bronze_risk_assessments
[2025-02-25T19:48:24.960+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.960+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_bronze_risk_assessments
[2025-02-25T19:48:24.963+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.963+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_bronze_risk_assessments
[2025-02-25T19:48:24.970+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.970+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_gold_entities
[2025-02-25T19:48:24.973+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.973+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_gold_entities
[2025-02-25T19:48:24.976+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.976+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_gold_entities
[2025-02-25T19:48:24.982+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.982+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_bronze_claims
[2025-02-25T19:48:24.986+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.986+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_bronze_claims
[2025-02-25T19:48:24.989+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.989+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_bronze_claims
[2025-02-25T19:48:24.996+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.996+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_silver_regulations
[2025-02-25T19:48:25.000+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:24.999+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_silver_regulations
[2025-02-25T19:48:25.003+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.003+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_silver_regulations
[2025-02-25T19:48:25.012+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.012+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_gold_subaccounts
[2025-02-25T19:48:25.015+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.015+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_gold_subaccounts
[2025-02-25T19:48:25.019+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.019+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_gold_subaccounts
[2025-02-25T19:48:25.032+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.032+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_gold_merchants
[2025-02-25T19:48:25.036+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.035+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_gold_merchants
[2025-02-25T19:48:25.039+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.039+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_gold_merchants
[2025-02-25T19:48:25.047+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.047+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_silver_transactions
[2025-02-25T19:48:25.051+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.050+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_silver_transactions
[2025-02-25T19:48:25.054+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.054+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_silver_transactions
[2025-02-25T19:48:25.062+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.062+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_gold_loans
[2025-02-25T19:48:25.066+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.066+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_gold_loans
[2025-02-25T19:48:25.069+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.068+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_gold_loans
[2025-02-25T19:48:25.075+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.075+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_bronze_subaccounts
[2025-02-25T19:48:25.079+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.079+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_bronze_subaccounts
[2025-02-25T19:48:25.083+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.083+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_bronze_subaccounts
[2025-02-25T19:48:25.091+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.091+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_bronze_user_verifications
[2025-02-25T19:48:25.095+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.094+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_bronze_user_verifications
[2025-02-25T19:48:25.099+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.099+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_bronze_user_verifications
[2025-02-25T19:48:25.105+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.105+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_bronze_payment_methods
[2025-02-25T19:48:25.109+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.109+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_bronze_payment_methods
[2025-02-25T19:48:25.113+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.113+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_bronze_payment_methods
[2025-02-25T19:48:25.121+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.121+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_bronze_regulations
[2025-02-25T19:48:25.126+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.126+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_bronze_regulations
[2025-02-25T19:48:25.130+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.130+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_bronze_regulations
[2025-02-25T19:48:25.137+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.137+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_bronze_loans
[2025-02-25T19:48:25.142+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.142+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_bronze_loans
[2025-02-25T19:48:25.146+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.146+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_bronze_loans
[2025-02-25T19:48:25.153+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.153+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_bronze_insured_entities
[2025-02-25T19:48:25.158+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.158+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_bronze_insured_entities
[2025-02-25T19:48:25.163+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.163+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_bronze_insured_entities
[2025-02-25T19:48:25.171+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.171+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_gold_accounts
[2025-02-25T19:48:25.175+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.175+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_gold_accounts
[2025-02-25T19:48:25.179+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.179+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_gold_accounts
[2025-02-25T19:48:25.186+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.186+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_silver_audits
[2025-02-25T19:48:25.190+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.190+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_silver_audits
[2025-02-25T19:48:25.194+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.194+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_silver_audits
[2025-02-25T19:48:25.201+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.201+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_bronze_users
[2025-02-25T19:48:25.205+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.205+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_bronze_users
[2025-02-25T19:48:25.209+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.209+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_bronze_users
[2025-02-25T19:48:25.218+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.218+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_gold_users
[2025-02-25T19:48:25.223+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.223+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_gold_users
[2025-02-25T19:48:25.227+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.227+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_gold_users
[2025-02-25T19:48:25.235+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.235+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_bronze_accounts_deleted
[2025-02-25T19:48:25.239+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.239+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_bronze_accounts_deleted
[2025-02-25T19:48:25.244+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.243+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_bronze_accounts_deleted
[2025-02-25T19:48:25.252+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.252+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_gold_portfolios
[2025-02-25T19:48:25.256+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.256+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_gold_portfolios
[2025-02-25T19:48:25.261+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.261+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_gold_portfolios
[2025-02-25T19:48:25.268+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.268+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_bronze_credit_scores
[2025-02-25T19:48:25.272+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.271+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_bronze_credit_scores
[2025-02-25T19:48:25.275+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.275+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_bronze_credit_scores
[2025-02-25T19:48:25.283+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.283+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_bronze_portfolios
[2025-02-25T19:48:25.287+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.287+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_bronze_portfolios
[2025-02-25T19:48:25.291+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.291+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_bronze_portfolios
[2025-02-25T19:48:25.300+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.299+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_silver_policies
[2025-02-25T19:48:25.304+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.304+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_silver_policies
[2025-02-25T19:48:25.308+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.308+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_silver_policies
[2025-02-25T19:48:25.315+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.315+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_silver_loans
[2025-02-25T19:48:25.319+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.319+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_silver_loans
[2025-02-25T19:48:25.323+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.322+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_silver_loans
[2025-02-25T19:48:25.331+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.331+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_silver_merchants
[2025-02-25T19:48:25.335+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.335+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_silver_merchants
[2025-02-25T19:48:25.339+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.339+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_silver_merchants
[2025-02-25T19:48:25.346+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.346+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_silver_insured_entities
[2025-02-25T19:48:25.350+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.350+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_silver_insured_entities
[2025-02-25T19:48:25.354+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.354+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_silver_insured_entities
[2025-02-25T19:48:25.362+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.361+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_bronze_accounts_updated
[2025-02-25T19:48:25.366+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.366+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_bronze_accounts_updated
[2025-02-25T19:48:25.370+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.370+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_bronze_accounts_updated
[2025-02-25T19:48:25.377+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.377+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_silver_accounts
[2025-02-25T19:48:25.381+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.381+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_silver_accounts
[2025-02-25T19:48:25.385+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.385+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_silver_accounts
[2025-02-25T19:48:25.392+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.392+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_silver_user_verifications
[2025-02-25T19:48:25.396+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.396+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_silver_user_verifications
[2025-02-25T19:48:25.400+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.400+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_silver_user_verifications
[2025-02-25T19:48:25.407+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.407+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_gold_regulations
[2025-02-25T19:48:25.411+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.411+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_gold_regulations
[2025-02-25T19:48:25.415+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.414+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_gold_regulations
[2025-02-25T19:48:25.422+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.422+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_gold_policies
[2025-02-25T19:48:25.426+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.426+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_gold_policies
[2025-02-25T19:48:25.430+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.429+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_gold_policies
[2025-02-25T19:48:25.440+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.439+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_bronze_merchants
[2025-02-25T19:48:25.444+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.444+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_bronze_merchants
[2025-02-25T19:48:25.448+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.448+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_bronze_merchants
[2025-02-25T19:48:25.457+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.457+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_bronze_transactions
[2025-02-25T19:48:25.461+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.461+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_bronze_transactions
[2025-02-25T19:48:25.465+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.465+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_bronze_transactions
[2025-02-25T19:48:25.473+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.473+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_gold_claims
[2025-02-25T19:48:25.477+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.477+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_gold_claims
[2025-02-25T19:48:25.480+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.480+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_gold_claims
[2025-02-25T19:48:25.487+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.487+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_gold_payment_methods
[2025-02-25T19:48:25.491+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.491+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_gold_payment_methods
[2025-02-25T19:48:25.495+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.495+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_gold_payment_methods
[2025-02-25T19:48:25.503+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.503+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_gold_audits
[2025-02-25T19:48:25.508+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.508+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_gold_audits
[2025-02-25T19:48:25.512+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.512+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_gold_audits
[2025-02-25T19:48:25.520+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.519+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_bronze_entities
[2025-02-25T19:48:25.524+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.524+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_bronze_entities
[2025-02-25T19:48:25.528+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.527+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_bronze_entities
[2025-02-25T19:48:25.535+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.535+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_bronze_policies
[2025-02-25T19:48:25.539+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.539+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_bronze_policies
[2025-02-25T19:48:25.543+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.543+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_bronze_policies
[2025-02-25T19:48:25.550+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.550+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_bronze_audits
[2025-02-25T19:48:25.554+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.554+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_bronze_audits
[2025-02-25T19:48:25.557+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.557+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_bronze_audits
[2025-02-25T19:48:25.565+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.565+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_gold_user_verifications
[2025-02-25T19:48:25.569+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.569+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_gold_user_verifications
[2025-02-25T19:48:25.573+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.573+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_gold_user_verifications
[2025-02-25T19:48:25.580+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.580+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_bronze_payment
[2025-02-25T19:48:25.584+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.584+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_bronze_payment
[2025-02-25T19:48:25.588+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.588+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_bronze_payment
[2025-02-25T19:48:25.596+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.595+0000] {override.py:1769} INFO - Created Permission View: can edit on DAG:load_silver_credit_scores
[2025-02-25T19:48:25.599+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.599+0000] {override.py:1769} INFO - Created Permission View: can delete on DAG:load_silver_credit_scores
[2025-02-25T19:48:25.602+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.602+0000] {override.py:1769} INFO - Created Permission View: can read on DAG:load_silver_credit_scores
[2025-02-25T19:48:25.602+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.602+0000] {dag.py:3033} INFO - Sync 56 DAGs
[2025-02-25T19:48:25.607+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.607+0000] {dag.py:3055} INFO - Creating ORM DAG for load_gold_user_verifications
[2025-02-25T19:48:25.608+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.608+0000] {dag.py:3055} INFO - Creating ORM DAG for load_silver_entities
[2025-02-25T19:48:25.608+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.608+0000] {dag.py:3055} INFO - Creating ORM DAG for load_gold_loans
[2025-02-25T19:48:25.608+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.608+0000] {dag.py:3055} INFO - Creating ORM DAG for load_silver_subaccounts
[2025-02-25T19:48:25.608+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.608+0000] {dag.py:3055} INFO - Creating ORM DAG for load_bronze_regulations
[2025-02-25T19:48:25.608+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.608+0000] {dag.py:3055} INFO - Creating ORM DAG for load_gold_accounts
[2025-02-25T19:48:25.608+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.608+0000] {dag.py:3055} INFO - Creating ORM DAG for load_silver_users
[2025-02-25T19:48:25.609+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.609+0000] {dag.py:3055} INFO - Creating ORM DAG for load_gold_credit_scores
[2025-02-25T19:48:25.609+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.609+0000] {dag.py:3055} INFO - Creating ORM DAG for load_bronze_risk_assessments
[2025-02-25T19:48:25.609+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.609+0000] {dag.py:3055} INFO - Creating ORM DAG for load_bronze_accounts_updated
[2025-02-25T19:48:25.609+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.609+0000] {dag.py:3055} INFO - Creating ORM DAG for load_bronze_subaccounts
[2025-02-25T19:48:25.609+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.609+0000] {dag.py:3055} INFO - Creating ORM DAG for load_gold_regulations
[2025-02-25T19:48:25.609+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.609+0000] {dag.py:3055} INFO - Creating ORM DAG for load_silver_credit_scores
[2025-02-25T19:48:25.609+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.609+0000] {dag.py:3055} INFO - Creating ORM DAG for load_bronze_payment
[2025-02-25T19:48:25.610+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.610+0000] {dag.py:3055} INFO - Creating ORM DAG for load_silver_merchants
[2025-02-25T19:48:25.610+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.610+0000] {dag.py:3055} INFO - Creating ORM DAG for load_bronze_entities
[2025-02-25T19:48:25.610+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.610+0000] {dag.py:3055} INFO - Creating ORM DAG for load_gold_entities
[2025-02-25T19:48:25.610+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.610+0000] {dag.py:3055} INFO - Creating ORM DAG for load_silver_user_verifications
[2025-02-25T19:48:25.610+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.610+0000] {dag.py:3055} INFO - Creating ORM DAG for load_bronze_portfolios
[2025-02-25T19:48:25.610+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.610+0000] {dag.py:3055} INFO - Creating ORM DAG for load_gold_users
[2025-02-25T19:48:25.610+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.610+0000] {dag.py:3055} INFO - Creating ORM DAG for load_silver_claims
[2025-02-25T19:48:25.611+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.611+0000] {dag.py:3055} INFO - Creating ORM DAG for load_gold_payment
[2025-02-25T19:48:25.611+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.611+0000] {dag.py:3055} INFO - Creating ORM DAG for load_bronze_transactions
[2025-02-25T19:48:25.611+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.611+0000] {dag.py:3055} INFO - Creating ORM DAG for load_gold_risk_assessments
[2025-02-25T19:48:25.611+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.611+0000] {dag.py:3055} INFO - Creating ORM DAG for load_silver_payment_methods
[2025-02-25T19:48:25.611+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.611+0000] {dag.py:3055} INFO - Creating ORM DAG for load_bronze_loans
[2025-02-25T19:48:25.611+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.611+0000] {dag.py:3055} INFO - Creating ORM DAG for load_silver_accounts
[2025-02-25T19:48:25.612+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.611+0000] {dag.py:3055} INFO - Creating ORM DAG for load_bronze_claims
[2025-02-25T19:48:25.612+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.612+0000] {dag.py:3055} INFO - Creating ORM DAG for load_gold_subaccounts
[2025-02-25T19:48:25.612+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.612+0000] {dag.py:3055} INFO - Creating ORM DAG for load_bronze_accounts_deleted
[2025-02-25T19:48:25.612+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.612+0000] {dag.py:3055} INFO - Creating ORM DAG for load_bronze_credit_scores
[2025-02-25T19:48:25.612+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.612+0000] {dag.py:3055} INFO - Creating ORM DAG for load_bronze_audits
[2025-02-25T19:48:25.612+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.612+0000] {dag.py:3055} INFO - Creating ORM DAG for load_gold_merchants
[2025-02-25T19:48:25.612+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.612+0000] {dag.py:3055} INFO - Creating ORM DAG for load_bronze_accounts_created
[2025-02-25T19:48:25.613+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.613+0000] {dag.py:3055} INFO - Creating ORM DAG for load_silver_transactions
[2025-02-25T19:48:25.613+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.613+0000] {dag.py:3055} INFO - Creating ORM DAG for load_bronze_merchants
[2025-02-25T19:48:25.613+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.613+0000] {dag.py:3055} INFO - Creating ORM DAG for load_silver_insured_entities
[2025-02-25T19:48:25.613+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.613+0000] {dag.py:3055} INFO - Creating ORM DAG for load_silver_regulations
[2025-02-25T19:48:25.613+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.613+0000] {dag.py:3055} INFO - Creating ORM DAG for load_gold_insured_entities
[2025-02-25T19:48:25.613+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.613+0000] {dag.py:3055} INFO - Creating ORM DAG for load_bronze_insured_entities
[2025-02-25T19:48:25.613+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.613+0000] {dag.py:3055} INFO - Creating ORM DAG for load_gold_portfolios
[2025-02-25T19:48:25.614+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.613+0000] {dag.py:3055} INFO - Creating ORM DAG for load_silver_risk_assessments
[2025-02-25T19:48:25.614+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.614+0000] {dag.py:3055} INFO - Creating ORM DAG for load_bronze_user_verifications
[2025-02-25T19:48:25.614+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.614+0000] {dag.py:3055} INFO - Creating ORM DAG for load_silver_policies
[2025-02-25T19:48:25.614+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.614+0000] {dag.py:3055} INFO - Creating ORM DAG for load_gold_transactions
[2025-02-25T19:48:25.614+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.614+0000] {dag.py:3055} INFO - Creating ORM DAG for load_bronze_policies
[2025-02-25T19:48:25.614+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.614+0000] {dag.py:3055} INFO - Creating ORM DAG for load_gold_policies
[2025-02-25T19:48:25.614+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.614+0000] {dag.py:3055} INFO - Creating ORM DAG for load_bronze_payment_methods
[2025-02-25T19:48:25.615+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.615+0000] {dag.py:3055} INFO - Creating ORM DAG for load_silver_loans
[2025-02-25T19:48:25.615+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.615+0000] {dag.py:3055} INFO - Creating ORM DAG for load_gold_audits
[2025-02-25T19:48:25.615+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.615+0000] {dag.py:3055} INFO - Creating ORM DAG for load_gold_payment_methods
[2025-02-25T19:48:25.615+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.615+0000] {dag.py:3055} INFO - Creating ORM DAG for load_gold_claims
[2025-02-25T19:48:25.615+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.615+0000] {dag.py:3055} INFO - Creating ORM DAG for load_silver_audits
[2025-02-25T19:48:25.615+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.615+0000] {dag.py:3055} INFO - Creating ORM DAG for load_silver_payment
[2025-02-25T19:48:25.615+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.615+0000] {dag.py:3055} INFO - Creating ORM DAG for load_silver_portfolios
[2025-02-25T19:48:25.616+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.616+0000] {dag.py:3055} INFO - Creating ORM DAG for load_bronze_users
[2025-02-25T19:48:25.620+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.620+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_accounts_created to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.621+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.621+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_accounts_deleted to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.621+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.621+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_accounts_updated to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.622+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.622+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_audits to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.622+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.622+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_claims to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.623+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.623+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_credit_scores to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.624+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.624+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_entities to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.624+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.624+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_insured_entities to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.625+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.625+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_loans to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.625+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.625+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_merchants to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.626+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.626+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_payment to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.626+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.626+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_payment_methods to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.627+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.627+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_policies to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.628+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.628+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_portfolios to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.628+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.628+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_regulations to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.629+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.629+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_risk_assessments to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.629+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.629+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_subaccounts to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.630+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.630+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_transactions to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.631+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.631+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_user_verifications to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.631+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.631+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_users to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.632+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.632+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_accounts to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.632+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.632+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_audits to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.633+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.633+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_claims to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.633+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.633+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_credit_scores to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.634+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.634+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_entities to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.635+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.635+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_insured_entities to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.635+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.635+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_loans to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.636+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.636+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_merchants to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.636+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.636+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_payment to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.637+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.637+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_payment_methods to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.638+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.637+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_policies to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.638+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.638+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_portfolios to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.639+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.639+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_regulations to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.639+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.639+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_risk_assessments to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.640+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.640+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_subaccounts to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.640+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.640+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_transactions to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.641+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.641+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_user_verifications to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.642+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.642+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_users to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.642+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.642+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_accounts to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.643+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.643+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_audits to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.643+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.643+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_claims to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.644+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.644+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_credit_scores to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.644+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.644+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_entities to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.645+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.645+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_insured_entities to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.646+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.646+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_loans to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.646+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.646+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_merchants to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.647+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.647+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_payment to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.647+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.647+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_payment_methods to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.648+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.648+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_policies to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.649+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.648+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_portfolios to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.649+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.649+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_regulations to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.650+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.650+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_risk_assessments to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.650+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.650+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_subaccounts to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.651+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.651+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_transactions to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.651+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.651+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_user_verifications to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.652+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:25.652+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_users to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:25.670+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 1.070 seconds
[2025-02-25T19:48:55.974+0000] {processor.py:161} INFO - Started process (PID=92) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:48:55.975+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:48:55.975+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:55.975+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:48:55.995+0000] {logging_mixin.py:188} WARNING - /home/airflow/.local/lib/python3.8/site-packages/airflow/models/baseoperator.py:437 AirflowProviderDeprecationWarning: Class `SimpleHttpOperator` is deprecated and will be removed in a future release. Please use `HttpOperator` instead.
[2025-02-25T19:48:56.031+0000] {processor.py:840} INFO - DAG(s) 'load_silver_insured_entities', 'load_gold_entities', 'load_silver_accounts', 'load_silver_portfolios', 'load_gold_portfolios', 'load_silver_audits', 'load_bronze_subaccounts', 'load_bronze_credit_scores', 'load_gold_payment_methods', 'load_bronze_accounts_created', 'load_bronze_merchants', 'load_silver_claims', 'load_silver_credit_scores', 'load_gold_policies', 'load_gold_merchants', 'load_gold_insured_entities', 'load_silver_loans', 'load_gold_audits', 'load_bronze_users', 'load_silver_merchants', 'load_bronze_accounts_updated', 'load_gold_transactions', 'load_bronze_payment_methods', 'load_bronze_insured_entities', 'load_gold_payment', 'load_gold_risk_assessments', 'load_bronze_accounts_deleted', 'load_bronze_user_verifications', 'load_gold_accounts', 'load_silver_policies', 'load_bronze_audits', 'load_silver_entities', 'load_gold_subaccounts', 'load_bronze_policies', 'load_gold_claims', 'load_bronze_portfolios', 'load_silver_subaccounts', 'load_bronze_entities', 'load_bronze_transactions', 'load_bronze_regulations', 'load_silver_users', 'load_gold_user_verifications', 'load_bronze_loans', 'load_bronze_payment', 'load_gold_loans', 'load_silver_user_verifications', 'load_gold_users', 'load_silver_payment_methods', 'load_silver_transactions', 'load_gold_regulations', 'load_silver_risk_assessments', 'load_silver_payment', 'load_silver_regulations', 'load_bronze_risk_assessments', 'load_bronze_claims', 'load_gold_credit_scores' retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:48:56.115+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.115+0000] {dag.py:3033} INFO - Sync 56 DAGs
[2025-02-25T19:48:56.130+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.130+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_accounts_created to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.132+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.132+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_accounts_deleted to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.134+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.133+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_accounts_updated to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.135+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.135+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_audits to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.136+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.136+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_claims to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.137+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.137+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_credit_scores to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.138+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.138+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_entities to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.139+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.139+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_insured_entities to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.140+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.140+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_loans to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.141+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.141+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_merchants to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.142+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.142+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_payment to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.143+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.143+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_payment_methods to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.144+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.144+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_policies to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.144+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.144+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_portfolios to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.145+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.145+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_regulations to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.146+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.146+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_risk_assessments to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.147+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.147+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_subaccounts to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.148+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.148+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_transactions to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.148+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.148+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_user_verifications to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.149+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.149+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_users to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.150+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.150+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_accounts to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.151+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.151+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_audits to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.152+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.152+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_claims to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.152+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.152+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_credit_scores to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.153+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.153+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_entities to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.154+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.154+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_insured_entities to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.155+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.155+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_loans to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.156+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.156+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_merchants to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.156+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.156+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_payment to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.157+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.157+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_payment_methods to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.158+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.158+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_policies to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.159+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.159+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_portfolios to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.159+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.159+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_regulations to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.160+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.160+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_risk_assessments to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.161+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.161+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_subaccounts to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.162+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.162+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_transactions to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.163+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.163+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_user_verifications to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.163+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.163+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_users to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.164+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.164+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_accounts to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.165+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.165+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_audits to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.166+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.166+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_claims to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.166+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.166+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_credit_scores to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.167+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.167+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_entities to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.168+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.168+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_insured_entities to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.169+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.169+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_loans to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.169+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.169+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_merchants to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.170+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.170+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_payment to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.171+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.171+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_payment_methods to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.172+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.172+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_policies to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.173+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.173+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_portfolios to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.173+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.173+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_regulations to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.174+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.174+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_risk_assessments to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.175+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.175+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_subaccounts to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.176+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.176+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_transactions to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.176+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.176+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_user_verifications to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.177+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:48:56.177+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_users to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:48:56.192+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.222 seconds
[2025-02-25T19:49:27.540+0000] {processor.py:161} INFO - Started process (PID=72) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:49:27.540+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:49:27.541+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.541+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:49:27.552+0000] {logging_mixin.py:188} WARNING - /home/airflow/.local/lib/python3.8/site-packages/airflow/models/baseoperator.py:437 AirflowProviderDeprecationWarning: Class `SimpleHttpOperator` is deprecated and will be removed in a future release. Please use `HttpOperator` instead.
[2025-02-25T19:49:27.584+0000] {processor.py:840} INFO - DAG(s) 'load_bronze_audits', 'load_gold_merchants', 'load_bronze_regulations', 'load_silver_merchants', 'load_silver_portfolios', 'load_gold_entities', 'load_gold_transactions', 'load_bronze_payment_methods', 'load_bronze_credit_scores', 'load_silver_payment', 'load_bronze_loans', 'load_silver_claims', 'load_silver_subaccounts', 'load_silver_entities', 'load_silver_user_verifications', 'load_silver_accounts', 'load_bronze_accounts_updated', 'load_bronze_payment', 'load_silver_credit_scores', 'load_gold_insured_entities', 'load_bronze_insured_entities', 'load_silver_risk_assessments', 'load_silver_transactions', 'load_gold_loans', 'load_gold_accounts', 'load_bronze_entities', 'load_gold_payment_methods', 'load_bronze_transactions', 'load_gold_portfolios', 'load_silver_regulations', 'load_gold_subaccounts', 'load_bronze_user_verifications', 'load_gold_user_verifications', 'load_silver_loans', 'load_bronze_portfolios', 'load_gold_credit_scores', 'load_silver_insured_entities', 'load_bronze_subaccounts', 'load_bronze_claims', 'load_bronze_risk_assessments', 'load_gold_users', 'load_bronze_accounts_deleted', 'load_silver_policies', 'load_gold_risk_assessments', 'load_gold_payment', 'load_gold_claims', 'load_bronze_policies', 'load_gold_regulations', 'load_bronze_merchants', 'load_silver_users', 'load_gold_policies', 'load_silver_audits', 'load_silver_payment_methods', 'load_bronze_users', 'load_bronze_accounts_created', 'load_gold_audits' retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:49:27.881+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.881+0000] {dag.py:3033} INFO - Sync 56 DAGs
[2025-02-25T19:49:27.897+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.897+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_accounts_created to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.899+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.899+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_accounts_deleted to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.900+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.900+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_accounts_updated to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.901+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.901+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_audits to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.903+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.902+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_claims to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.904+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.904+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_credit_scores to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.905+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.905+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_entities to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.906+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.906+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_insured_entities to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.907+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.907+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_loans to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.908+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.908+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_merchants to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.909+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.909+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_payment to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.910+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.910+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_payment_methods to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.911+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.911+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_policies to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.912+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.912+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_portfolios to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.913+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.913+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_regulations to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.914+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.914+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_risk_assessments to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.915+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.915+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_subaccounts to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.916+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.916+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_transactions to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.917+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.917+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_user_verifications to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.918+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.918+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_users to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.919+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.919+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_accounts to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.920+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.920+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_audits to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.921+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.921+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_claims to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.922+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.922+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_credit_scores to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.923+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.923+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_entities to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.924+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.924+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_insured_entities to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.925+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.925+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_loans to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.926+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.926+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_merchants to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.927+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.927+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_payment to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.928+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.928+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_payment_methods to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.929+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.929+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_policies to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.930+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.930+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_portfolios to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.930+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.930+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_regulations to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.931+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.931+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_risk_assessments to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.932+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.932+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_subaccounts to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.933+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.933+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_transactions to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.934+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.934+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_user_verifications to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.935+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.935+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_users to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.936+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.936+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_accounts to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.937+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.937+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_audits to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.938+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.938+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_claims to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.939+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.939+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_credit_scores to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.940+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.940+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_entities to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.941+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.941+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_insured_entities to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.942+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.942+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_loans to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.943+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.943+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_merchants to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.944+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.944+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_payment to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.945+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.945+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_payment_methods to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.946+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.946+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_policies to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.947+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.947+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_portfolios to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.948+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.948+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_regulations to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.949+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.949+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_risk_assessments to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.950+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.950+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_subaccounts to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.951+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.951+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_transactions to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.952+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.952+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_user_verifications to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.953+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:27.953+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_users to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:27.982+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.444 seconds
[2025-02-25T19:49:58.376+0000] {processor.py:161} INFO - Started process (PID=79) to work on /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:49:58.377+0000] {processor.py:830} INFO - Processing file /opt/airflow/dags/dynamic_api_trigger.py for tasks to queue
[2025-02-25T19:49:58.381+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.381+0000] {dagbag.py:538} INFO - Filling up the DagBag from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:49:58.398+0000] {logging_mixin.py:188} WARNING - /home/airflow/.local/lib/python3.8/site-packages/airflow/models/baseoperator.py:437 AirflowProviderDeprecationWarning: Class `SimpleHttpOperator` is deprecated and will be removed in a future release. Please use `HttpOperator` instead.
[2025-02-25T19:49:58.436+0000] {processor.py:840} INFO - DAG(s) 'load_gold_audits', 'load_bronze_credit_scores', 'load_bronze_payment_methods', 'load_gold_policies', 'load_bronze_risk_assessments', 'load_bronze_merchants', 'load_bronze_entities', 'load_silver_policies', 'load_bronze_accounts_deleted', 'load_gold_payment', 'load_gold_insured_entities', 'load_gold_regulations', 'load_bronze_transactions', 'load_bronze_payment', 'load_bronze_loans', 'load_silver_risk_assessments', 'load_bronze_portfolios', 'load_gold_subaccounts', 'load_gold_user_verifications', 'load_silver_portfolios', 'load_silver_credit_scores', 'load_gold_users', 'load_bronze_audits', 'load_bronze_insured_entities', 'load_silver_claims', 'load_silver_entities', 'load_gold_portfolios', 'load_gold_payment_methods', 'load_gold_merchants', 'load_bronze_regulations', 'load_gold_accounts', 'load_silver_payment', 'load_gold_entities', 'load_silver_payment_methods', 'load_silver_users', 'load_bronze_user_verifications', 'load_silver_regulations', 'load_silver_transactions', 'load_bronze_users', 'load_gold_loans', 'load_silver_loans', 'load_silver_accounts', 'load_gold_credit_scores', 'load_gold_claims', 'load_bronze_subaccounts', 'load_bronze_accounts_created', 'load_gold_risk_assessments', 'load_bronze_policies', 'load_bronze_accounts_updated', 'load_silver_user_verifications', 'load_silver_merchants', 'load_gold_transactions', 'load_silver_insured_entities', 'load_silver_subaccounts', 'load_bronze_claims', 'load_silver_audits' retrieved from /opt/airflow/dags/dynamic_api_trigger.py
[2025-02-25T19:49:58.527+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.527+0000] {dag.py:3033} INFO - Sync 56 DAGs
[2025-02-25T19:49:58.543+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.542+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_accounts_created to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.545+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.545+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_accounts_deleted to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.546+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.546+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_accounts_updated to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.547+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.547+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_audits to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.548+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.548+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_claims to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.549+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.549+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_credit_scores to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.550+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.550+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_entities to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.550+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.550+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_insured_entities to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.551+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.551+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_loans to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.552+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.552+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_merchants to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.554+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.554+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_payment to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.555+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.555+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_payment_methods to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.556+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.556+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_policies to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.557+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.557+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_portfolios to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.558+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.557+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_regulations to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.558+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.558+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_risk_assessments to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.560+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.560+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_subaccounts to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.561+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.561+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_transactions to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.561+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.561+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_user_verifications to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.562+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.562+0000] {dag.py:3820} INFO - Setting next_dagrun for load_bronze_users to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.563+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.563+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_accounts to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.564+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.564+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_audits to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.565+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.564+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_claims to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.566+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.566+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_credit_scores to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.566+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.566+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_entities to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.567+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.567+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_insured_entities to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.568+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.568+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_loans to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.569+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.569+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_merchants to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.569+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.569+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_payment to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.570+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.570+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_payment_methods to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.571+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.571+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_policies to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.572+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.572+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_portfolios to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.573+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.573+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_regulations to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.573+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.573+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_risk_assessments to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.574+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.574+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_subaccounts to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.575+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.575+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_transactions to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.577+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.576+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_user_verifications to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.578+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.578+0000] {dag.py:3820} INFO - Setting next_dagrun for load_gold_users to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.578+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.578+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_accounts to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.579+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.579+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_audits to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.580+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.580+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_claims to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.581+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.581+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_credit_scores to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.582+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.582+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_entities to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.583+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.582+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_insured_entities to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.583+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.583+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_loans to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.584+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.584+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_merchants to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.585+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.585+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_payment to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.587+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.587+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_payment_methods to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.588+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.588+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_policies to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.589+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.589+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_portfolios to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.590+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.590+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_regulations to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.591+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.591+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_risk_assessments to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.592+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.592+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_subaccounts to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.593+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.593+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_transactions to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.594+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.594+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_user_verifications to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.595+0000] {logging_mixin.py:188} INFO - [2025-02-25T19:49:58.595+0000] {dag.py:3820} INFO - Setting next_dagrun for load_silver_users to 2025-02-24T00:00:00+00:00, run_after=2025-02-25T00:00:00+00:00
[2025-02-25T19:49:58.609+0000] {processor.py:183} INFO - Processing /opt/airflow/dags/dynamic_api_trigger.py took 0.240 seconds
