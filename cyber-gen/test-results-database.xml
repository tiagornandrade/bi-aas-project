<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="17" failures="0" skipped="0" tests="17" time="2.557" timestamp="2025-02-26T09:59:24.978688" hostname="MacBook-Pro-de-Tiago.local"><testcase classname="tests.test_services" name="test_insert_users_happy_path[zero_users]" time="0.024"><error message="failed on setup with &quot;sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at &quot;localhost&quot; (::1), port 5432 failed: Connection refused&#10;&#09;Is the server running on that host and accepting TCP/IP connections?&#10;connection to server at &quot;localhost&quot; (127.0.0.1), port 5432 failed: Connection refused&#10;&#09;Is the server running on that host and accepting TCP/IP connections?&#10;&#10;(Background on this error at: https://sqlalche.me/e/14/e3q8)&quot;">self = Engine(postgresql://postgres:***@localhost:5432/postgres), fn = &lt;bound method Pool.connect of &lt;sqlalchemy.pool.impl.QueuePool object at 0x103907fd0&gt;&gt;, connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
&gt;           return fn()

../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3371:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:327: in connect
    return _ConnectionFairy._checkout(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:894: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:493: in checkout
    rec = pool._do_get()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:145: in _do_get
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:143: in _do_get
    return self._create_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:273: in _create_connection
    return _ConnectionRecord(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:388: in __init__
    self.__connect()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:690: in __connect
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:686: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/create.py:574: in connect
    return dialect.connect(*cargs, **cparams)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py:598: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=localhost user=postgres password=postgres port=5432 dbname=postgres', connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
&gt;       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "localhost" (::1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?

../venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def test_db():
&gt;       Base.metadata.create_all(engine)

tests/test_services.py:11:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../venv/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:4930: in create_all
    bind._run_ddl_visitor(
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3237: in _run_ddl_visitor
    with self.begin() as conn:
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3153: in begin
    conn = self.connect(close_with_result=close_with_result)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3325: in connect
    return self._connection_cls(self, close_with_result=close_with_result)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:96: in __init__
    else engine.raw_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3404: in raw_connection
    return self._wrap_pool_connect(self.pool.connect, _connection)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3374: in _wrap_pool_connect
    Connection._handle_dbapi_exception_noconnection(
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2208: in _handle_dbapi_exception_noconnection
    util.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3371: in _wrap_pool_connect
    return fn()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:327: in connect
    return _ConnectionFairy._checkout(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:894: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:493: in checkout
    rec = pool._do_get()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:145: in _do_get
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:143: in _do_get
    return self._create_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:273: in _create_connection
    return _ConnectionRecord(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:388: in __init__
    self.__connect()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:690: in __connect
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:686: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/create.py:574: in connect
    return dialect.connect(*cargs, **cparams)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py:598: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=localhost user=postgres password=postgres port=5432 dbname=postgres', connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
&gt;       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at "localhost" (::1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E
E       (Background on this error at: https://sqlalche.me/e/14/e3q8)

../venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError</error></testcase><testcase classname="tests.test_services" name="test_insert_users_happy_path[one_user]" time="0.001"><error message="failed on setup with &quot;sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at &quot;localhost&quot; (::1), port 5432 failed: Connection refused&#10;&#09;Is the server running on that host and accepting TCP/IP connections?&#10;connection to server at &quot;localhost&quot; (127.0.0.1), port 5432 failed: Connection refused&#10;&#09;Is the server running on that host and accepting TCP/IP connections?&#10;&#10;(Background on this error at: https://sqlalche.me/e/14/e3q8)&quot;">self = Engine(postgresql://postgres:***@localhost:5432/postgres), fn = &lt;bound method Pool.connect of &lt;sqlalchemy.pool.impl.QueuePool object at 0x103907fd0&gt;&gt;, connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
&gt;           return fn()

../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3371:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:327: in connect
    return _ConnectionFairy._checkout(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:894: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:493: in checkout
    rec = pool._do_get()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:145: in _do_get
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:143: in _do_get
    return self._create_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:273: in _create_connection
    return _ConnectionRecord(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:388: in __init__
    self.__connect()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:690: in __connect
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:686: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/create.py:574: in connect
    return dialect.connect(*cargs, **cparams)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py:598: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=localhost user=postgres password=postgres port=5432 dbname=postgres', connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
&gt;       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "localhost" (::1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?

../venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def test_db():
&gt;       Base.metadata.create_all(engine)

tests/test_services.py:11:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../venv/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:4930: in create_all
    bind._run_ddl_visitor(
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3237: in _run_ddl_visitor
    with self.begin() as conn:
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3153: in begin
    conn = self.connect(close_with_result=close_with_result)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3325: in connect
    return self._connection_cls(self, close_with_result=close_with_result)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:96: in __init__
    else engine.raw_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3404: in raw_connection
    return self._wrap_pool_connect(self.pool.connect, _connection)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3374: in _wrap_pool_connect
    Connection._handle_dbapi_exception_noconnection(
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2208: in _handle_dbapi_exception_noconnection
    util.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3371: in _wrap_pool_connect
    return fn()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:327: in connect
    return _ConnectionFairy._checkout(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:894: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:493: in checkout
    rec = pool._do_get()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:145: in _do_get
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:143: in _do_get
    return self._create_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:273: in _create_connection
    return _ConnectionRecord(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:388: in __init__
    self.__connect()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:690: in __connect
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:686: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/create.py:574: in connect
    return dialect.connect(*cargs, **cparams)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py:598: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=localhost user=postgres password=postgres port=5432 dbname=postgres', connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
&gt;       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at "localhost" (::1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E
E       (Background on this error at: https://sqlalche.me/e/14/e3q8)

../venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError</error></testcase><testcase classname="tests.test_services" name="test_insert_users_happy_path[multiple_users]" time="0.001"><error message="failed on setup with &quot;sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at &quot;localhost&quot; (::1), port 5432 failed: Connection refused&#10;&#09;Is the server running on that host and accepting TCP/IP connections?&#10;connection to server at &quot;localhost&quot; (127.0.0.1), port 5432 failed: Connection refused&#10;&#09;Is the server running on that host and accepting TCP/IP connections?&#10;&#10;(Background on this error at: https://sqlalche.me/e/14/e3q8)&quot;">self = Engine(postgresql://postgres:***@localhost:5432/postgres), fn = &lt;bound method Pool.connect of &lt;sqlalchemy.pool.impl.QueuePool object at 0x103907fd0&gt;&gt;, connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
&gt;           return fn()

../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3371:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:327: in connect
    return _ConnectionFairy._checkout(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:894: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:493: in checkout
    rec = pool._do_get()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:145: in _do_get
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:143: in _do_get
    return self._create_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:273: in _create_connection
    return _ConnectionRecord(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:388: in __init__
    self.__connect()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:690: in __connect
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:686: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/create.py:574: in connect
    return dialect.connect(*cargs, **cparams)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py:598: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=localhost user=postgres password=postgres port=5432 dbname=postgres', connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
&gt;       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "localhost" (::1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?

../venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def test_db():
&gt;       Base.metadata.create_all(engine)

tests/test_services.py:11:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../venv/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:4930: in create_all
    bind._run_ddl_visitor(
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3237: in _run_ddl_visitor
    with self.begin() as conn:
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3153: in begin
    conn = self.connect(close_with_result=close_with_result)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3325: in connect
    return self._connection_cls(self, close_with_result=close_with_result)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:96: in __init__
    else engine.raw_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3404: in raw_connection
    return self._wrap_pool_connect(self.pool.connect, _connection)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3374: in _wrap_pool_connect
    Connection._handle_dbapi_exception_noconnection(
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2208: in _handle_dbapi_exception_noconnection
    util.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3371: in _wrap_pool_connect
    return fn()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:327: in connect
    return _ConnectionFairy._checkout(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:894: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:493: in checkout
    rec = pool._do_get()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:145: in _do_get
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:143: in _do_get
    return self._create_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:273: in _create_connection
    return _ConnectionRecord(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:388: in __init__
    self.__connect()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:690: in __connect
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:686: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/create.py:574: in connect
    return dialect.connect(*cargs, **cparams)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py:598: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=localhost user=postgres password=postgres port=5432 dbname=postgres', connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
&gt;       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at "localhost" (::1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E
E       (Background on this error at: https://sqlalche.me/e/14/e3q8)

../venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError</error></testcase><testcase classname="tests.test_services" name="test_insert_users_rollback" time="0.001"><error message="failed on setup with &quot;sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at &quot;localhost&quot; (::1), port 5432 failed: Connection refused&#10;&#09;Is the server running on that host and accepting TCP/IP connections?&#10;connection to server at &quot;localhost&quot; (127.0.0.1), port 5432 failed: Connection refused&#10;&#09;Is the server running on that host and accepting TCP/IP connections?&#10;&#10;(Background on this error at: https://sqlalche.me/e/14/e3q8)&quot;">self = Engine(postgresql://postgres:***@localhost:5432/postgres), fn = &lt;bound method Pool.connect of &lt;sqlalchemy.pool.impl.QueuePool object at 0x103907fd0&gt;&gt;, connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
&gt;           return fn()

../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3371:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:327: in connect
    return _ConnectionFairy._checkout(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:894: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:493: in checkout
    rec = pool._do_get()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:145: in _do_get
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:143: in _do_get
    return self._create_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:273: in _create_connection
    return _ConnectionRecord(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:388: in __init__
    self.__connect()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:690: in __connect
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:686: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/create.py:574: in connect
    return dialect.connect(*cargs, **cparams)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py:598: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=localhost user=postgres password=postgres port=5432 dbname=postgres', connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
&gt;       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "localhost" (::1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?

../venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def test_db():
&gt;       Base.metadata.create_all(engine)

tests/test_services.py:11:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../venv/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:4930: in create_all
    bind._run_ddl_visitor(
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3237: in _run_ddl_visitor
    with self.begin() as conn:
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3153: in begin
    conn = self.connect(close_with_result=close_with_result)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3325: in connect
    return self._connection_cls(self, close_with_result=close_with_result)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:96: in __init__
    else engine.raw_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3404: in raw_connection
    return self._wrap_pool_connect(self.pool.connect, _connection)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3374: in _wrap_pool_connect
    Connection._handle_dbapi_exception_noconnection(
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2208: in _handle_dbapi_exception_noconnection
    util.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3371: in _wrap_pool_connect
    return fn()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:327: in connect
    return _ConnectionFairy._checkout(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:894: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:493: in checkout
    rec = pool._do_get()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:145: in _do_get
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:143: in _do_get
    return self._create_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:273: in _create_connection
    return _ConnectionRecord(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:388: in __init__
    self.__connect()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:690: in __connect
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:686: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/create.py:574: in connect
    return dialect.connect(*cargs, **cparams)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py:598: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=localhost user=postgres password=postgres port=5432 dbname=postgres', connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
&gt;       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at "localhost" (::1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E
E       (Background on this error at: https://sqlalche.me/e/14/e3q8)

../venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError</error></testcase><testcase classname="tests.test_services" name="test_insert_accounts_happy_path[zero_accounts]" time="0.001"><error message="failed on setup with &quot;sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at &quot;localhost&quot; (::1), port 5432 failed: Connection refused&#10;&#09;Is the server running on that host and accepting TCP/IP connections?&#10;connection to server at &quot;localhost&quot; (127.0.0.1), port 5432 failed: Connection refused&#10;&#09;Is the server running on that host and accepting TCP/IP connections?&#10;&#10;(Background on this error at: https://sqlalche.me/e/14/e3q8)&quot;">self = Engine(postgresql://postgres:***@localhost:5432/postgres), fn = &lt;bound method Pool.connect of &lt;sqlalchemy.pool.impl.QueuePool object at 0x103907fd0&gt;&gt;, connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
&gt;           return fn()

../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3371:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:327: in connect
    return _ConnectionFairy._checkout(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:894: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:493: in checkout
    rec = pool._do_get()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:145: in _do_get
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:143: in _do_get
    return self._create_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:273: in _create_connection
    return _ConnectionRecord(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:388: in __init__
    self.__connect()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:690: in __connect
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:686: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/create.py:574: in connect
    return dialect.connect(*cargs, **cparams)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py:598: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=localhost user=postgres password=postgres port=5432 dbname=postgres', connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
&gt;       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "localhost" (::1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?

../venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def test_db():
&gt;       Base.metadata.create_all(engine)

tests/test_services.py:11:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../venv/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:4930: in create_all
    bind._run_ddl_visitor(
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3237: in _run_ddl_visitor
    with self.begin() as conn:
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3153: in begin
    conn = self.connect(close_with_result=close_with_result)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3325: in connect
    return self._connection_cls(self, close_with_result=close_with_result)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:96: in __init__
    else engine.raw_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3404: in raw_connection
    return self._wrap_pool_connect(self.pool.connect, _connection)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3374: in _wrap_pool_connect
    Connection._handle_dbapi_exception_noconnection(
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2208: in _handle_dbapi_exception_noconnection
    util.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3371: in _wrap_pool_connect
    return fn()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:327: in connect
    return _ConnectionFairy._checkout(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:894: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:493: in checkout
    rec = pool._do_get()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:145: in _do_get
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:143: in _do_get
    return self._create_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:273: in _create_connection
    return _ConnectionRecord(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:388: in __init__
    self.__connect()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:690: in __connect
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:686: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/create.py:574: in connect
    return dialect.connect(*cargs, **cparams)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py:598: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=localhost user=postgres password=postgres port=5432 dbname=postgres', connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
&gt;       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at "localhost" (::1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E
E       (Background on this error at: https://sqlalche.me/e/14/e3q8)

../venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError</error></testcase><testcase classname="tests.test_services" name="test_insert_accounts_happy_path[one_account]" time="0.001"><error message="failed on setup with &quot;sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at &quot;localhost&quot; (::1), port 5432 failed: Connection refused&#10;&#09;Is the server running on that host and accepting TCP/IP connections?&#10;connection to server at &quot;localhost&quot; (127.0.0.1), port 5432 failed: Connection refused&#10;&#09;Is the server running on that host and accepting TCP/IP connections?&#10;&#10;(Background on this error at: https://sqlalche.me/e/14/e3q8)&quot;">self = Engine(postgresql://postgres:***@localhost:5432/postgres), fn = &lt;bound method Pool.connect of &lt;sqlalchemy.pool.impl.QueuePool object at 0x103907fd0&gt;&gt;, connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
&gt;           return fn()

../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3371:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:327: in connect
    return _ConnectionFairy._checkout(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:894: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:493: in checkout
    rec = pool._do_get()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:145: in _do_get
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:143: in _do_get
    return self._create_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:273: in _create_connection
    return _ConnectionRecord(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:388: in __init__
    self.__connect()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:690: in __connect
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:686: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/create.py:574: in connect
    return dialect.connect(*cargs, **cparams)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py:598: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=localhost user=postgres password=postgres port=5432 dbname=postgres', connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
&gt;       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "localhost" (::1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?

../venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def test_db():
&gt;       Base.metadata.create_all(engine)

tests/test_services.py:11:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../venv/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:4930: in create_all
    bind._run_ddl_visitor(
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3237: in _run_ddl_visitor
    with self.begin() as conn:
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3153: in begin
    conn = self.connect(close_with_result=close_with_result)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3325: in connect
    return self._connection_cls(self, close_with_result=close_with_result)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:96: in __init__
    else engine.raw_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3404: in raw_connection
    return self._wrap_pool_connect(self.pool.connect, _connection)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3374: in _wrap_pool_connect
    Connection._handle_dbapi_exception_noconnection(
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2208: in _handle_dbapi_exception_noconnection
    util.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3371: in _wrap_pool_connect
    return fn()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:327: in connect
    return _ConnectionFairy._checkout(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:894: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:493: in checkout
    rec = pool._do_get()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:145: in _do_get
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:143: in _do_get
    return self._create_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:273: in _create_connection
    return _ConnectionRecord(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:388: in __init__
    self.__connect()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:690: in __connect
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:686: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/create.py:574: in connect
    return dialect.connect(*cargs, **cparams)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py:598: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=localhost user=postgres password=postgres port=5432 dbname=postgres', connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
&gt;       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at "localhost" (::1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E
E       (Background on this error at: https://sqlalche.me/e/14/e3q8)

../venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError</error></testcase><testcase classname="tests.test_services" name="test_insert_accounts_happy_path[multiple_accounts]" time="0.001"><error message="failed on setup with &quot;sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at &quot;localhost&quot; (::1), port 5432 failed: Connection refused&#10;&#09;Is the server running on that host and accepting TCP/IP connections?&#10;connection to server at &quot;localhost&quot; (127.0.0.1), port 5432 failed: Connection refused&#10;&#09;Is the server running on that host and accepting TCP/IP connections?&#10;&#10;(Background on this error at: https://sqlalche.me/e/14/e3q8)&quot;">self = Engine(postgresql://postgres:***@localhost:5432/postgres), fn = &lt;bound method Pool.connect of &lt;sqlalchemy.pool.impl.QueuePool object at 0x103907fd0&gt;&gt;, connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
&gt;           return fn()

../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3371:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:327: in connect
    return _ConnectionFairy._checkout(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:894: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:493: in checkout
    rec = pool._do_get()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:145: in _do_get
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:143: in _do_get
    return self._create_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:273: in _create_connection
    return _ConnectionRecord(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:388: in __init__
    self.__connect()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:690: in __connect
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:686: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/create.py:574: in connect
    return dialect.connect(*cargs, **cparams)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py:598: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=localhost user=postgres password=postgres port=5432 dbname=postgres', connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
&gt;       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "localhost" (::1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?

../venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def test_db():
&gt;       Base.metadata.create_all(engine)

tests/test_services.py:11:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../venv/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:4930: in create_all
    bind._run_ddl_visitor(
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3237: in _run_ddl_visitor
    with self.begin() as conn:
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3153: in begin
    conn = self.connect(close_with_result=close_with_result)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3325: in connect
    return self._connection_cls(self, close_with_result=close_with_result)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:96: in __init__
    else engine.raw_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3404: in raw_connection
    return self._wrap_pool_connect(self.pool.connect, _connection)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3374: in _wrap_pool_connect
    Connection._handle_dbapi_exception_noconnection(
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2208: in _handle_dbapi_exception_noconnection
    util.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3371: in _wrap_pool_connect
    return fn()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:327: in connect
    return _ConnectionFairy._checkout(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:894: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:493: in checkout
    rec = pool._do_get()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:145: in _do_get
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:143: in _do_get
    return self._create_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:273: in _create_connection
    return _ConnectionRecord(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:388: in __init__
    self.__connect()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:690: in __connect
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:686: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/create.py:574: in connect
    return dialect.connect(*cargs, **cparams)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py:598: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=localhost user=postgres password=postgres port=5432 dbname=postgres', connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
&gt;       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at "localhost" (::1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E
E       (Background on this error at: https://sqlalche.me/e/14/e3q8)

../venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError</error></testcase><testcase classname="tests.test_services" name="test_insert_accounts_rollback" time="0.001"><error message="failed on setup with &quot;sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at &quot;localhost&quot; (::1), port 5432 failed: Connection refused&#10;&#09;Is the server running on that host and accepting TCP/IP connections?&#10;connection to server at &quot;localhost&quot; (127.0.0.1), port 5432 failed: Connection refused&#10;&#09;Is the server running on that host and accepting TCP/IP connections?&#10;&#10;(Background on this error at: https://sqlalche.me/e/14/e3q8)&quot;">self = Engine(postgresql://postgres:***@localhost:5432/postgres), fn = &lt;bound method Pool.connect of &lt;sqlalchemy.pool.impl.QueuePool object at 0x103907fd0&gt;&gt;, connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
&gt;           return fn()

../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3371:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:327: in connect
    return _ConnectionFairy._checkout(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:894: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:493: in checkout
    rec = pool._do_get()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:145: in _do_get
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:143: in _do_get
    return self._create_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:273: in _create_connection
    return _ConnectionRecord(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:388: in __init__
    self.__connect()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:690: in __connect
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:686: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/create.py:574: in connect
    return dialect.connect(*cargs, **cparams)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py:598: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=localhost user=postgres password=postgres port=5432 dbname=postgres', connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
&gt;       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "localhost" (::1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?

../venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def test_db():
&gt;       Base.metadata.create_all(engine)

tests/test_services.py:11:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../venv/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:4930: in create_all
    bind._run_ddl_visitor(
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3237: in _run_ddl_visitor
    with self.begin() as conn:
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3153: in begin
    conn = self.connect(close_with_result=close_with_result)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3325: in connect
    return self._connection_cls(self, close_with_result=close_with_result)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:96: in __init__
    else engine.raw_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3404: in raw_connection
    return self._wrap_pool_connect(self.pool.connect, _connection)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3374: in _wrap_pool_connect
    Connection._handle_dbapi_exception_noconnection(
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2208: in _handle_dbapi_exception_noconnection
    util.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3371: in _wrap_pool_connect
    return fn()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:327: in connect
    return _ConnectionFairy._checkout(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:894: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:493: in checkout
    rec = pool._do_get()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:145: in _do_get
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:143: in _do_get
    return self._create_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:273: in _create_connection
    return _ConnectionRecord(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:388: in __init__
    self.__connect()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:690: in __connect
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:686: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/create.py:574: in connect
    return dialect.connect(*cargs, **cparams)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py:598: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=localhost user=postgres password=postgres port=5432 dbname=postgres', connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
&gt;       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at "localhost" (::1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E
E       (Background on this error at: https://sqlalche.me/e/14/e3q8)

../venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError</error></testcase><testcase classname="tests.test_services" name="test_insert_subaccounts_happy_path[zero_subaccounts]" time="0.001"><error message="failed on setup with &quot;sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at &quot;localhost&quot; (::1), port 5432 failed: Connection refused&#10;&#09;Is the server running on that host and accepting TCP/IP connections?&#10;connection to server at &quot;localhost&quot; (127.0.0.1), port 5432 failed: Connection refused&#10;&#09;Is the server running on that host and accepting TCP/IP connections?&#10;&#10;(Background on this error at: https://sqlalche.me/e/14/e3q8)&quot;">self = Engine(postgresql://postgres:***@localhost:5432/postgres), fn = &lt;bound method Pool.connect of &lt;sqlalchemy.pool.impl.QueuePool object at 0x103907fd0&gt;&gt;, connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
&gt;           return fn()

../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3371:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:327: in connect
    return _ConnectionFairy._checkout(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:894: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:493: in checkout
    rec = pool._do_get()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:145: in _do_get
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:143: in _do_get
    return self._create_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:273: in _create_connection
    return _ConnectionRecord(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:388: in __init__
    self.__connect()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:690: in __connect
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:686: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/create.py:574: in connect
    return dialect.connect(*cargs, **cparams)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py:598: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=localhost user=postgres password=postgres port=5432 dbname=postgres', connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
&gt;       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "localhost" (::1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?

../venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def test_db():
&gt;       Base.metadata.create_all(engine)

tests/test_services.py:11:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../venv/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:4930: in create_all
    bind._run_ddl_visitor(
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3237: in _run_ddl_visitor
    with self.begin() as conn:
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3153: in begin
    conn = self.connect(close_with_result=close_with_result)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3325: in connect
    return self._connection_cls(self, close_with_result=close_with_result)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:96: in __init__
    else engine.raw_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3404: in raw_connection
    return self._wrap_pool_connect(self.pool.connect, _connection)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3374: in _wrap_pool_connect
    Connection._handle_dbapi_exception_noconnection(
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2208: in _handle_dbapi_exception_noconnection
    util.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3371: in _wrap_pool_connect
    return fn()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:327: in connect
    return _ConnectionFairy._checkout(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:894: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:493: in checkout
    rec = pool._do_get()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:145: in _do_get
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:143: in _do_get
    return self._create_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:273: in _create_connection
    return _ConnectionRecord(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:388: in __init__
    self.__connect()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:690: in __connect
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:686: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/create.py:574: in connect
    return dialect.connect(*cargs, **cparams)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py:598: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=localhost user=postgres password=postgres port=5432 dbname=postgres', connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
&gt;       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at "localhost" (::1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E
E       (Background on this error at: https://sqlalche.me/e/14/e3q8)

../venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError</error></testcase><testcase classname="tests.test_services" name="test_insert_subaccounts_happy_path[one_subaccount]" time="0.001"><error message="failed on setup with &quot;sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at &quot;localhost&quot; (::1), port 5432 failed: Connection refused&#10;&#09;Is the server running on that host and accepting TCP/IP connections?&#10;connection to server at &quot;localhost&quot; (127.0.0.1), port 5432 failed: Connection refused&#10;&#09;Is the server running on that host and accepting TCP/IP connections?&#10;&#10;(Background on this error at: https://sqlalche.me/e/14/e3q8)&quot;">self = Engine(postgresql://postgres:***@localhost:5432/postgres), fn = &lt;bound method Pool.connect of &lt;sqlalchemy.pool.impl.QueuePool object at 0x103907fd0&gt;&gt;, connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
&gt;           return fn()

../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3371:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:327: in connect
    return _ConnectionFairy._checkout(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:894: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:493: in checkout
    rec = pool._do_get()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:145: in _do_get
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:143: in _do_get
    return self._create_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:273: in _create_connection
    return _ConnectionRecord(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:388: in __init__
    self.__connect()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:690: in __connect
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:686: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/create.py:574: in connect
    return dialect.connect(*cargs, **cparams)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py:598: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=localhost user=postgres password=postgres port=5432 dbname=postgres', connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
&gt;       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "localhost" (::1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?

../venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def test_db():
&gt;       Base.metadata.create_all(engine)

tests/test_services.py:11:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../venv/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:4930: in create_all
    bind._run_ddl_visitor(
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3237: in _run_ddl_visitor
    with self.begin() as conn:
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3153: in begin
    conn = self.connect(close_with_result=close_with_result)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3325: in connect
    return self._connection_cls(self, close_with_result=close_with_result)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:96: in __init__
    else engine.raw_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3404: in raw_connection
    return self._wrap_pool_connect(self.pool.connect, _connection)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3374: in _wrap_pool_connect
    Connection._handle_dbapi_exception_noconnection(
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2208: in _handle_dbapi_exception_noconnection
    util.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3371: in _wrap_pool_connect
    return fn()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:327: in connect
    return _ConnectionFairy._checkout(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:894: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:493: in checkout
    rec = pool._do_get()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:145: in _do_get
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:143: in _do_get
    return self._create_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:273: in _create_connection
    return _ConnectionRecord(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:388: in __init__
    self.__connect()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:690: in __connect
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:686: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/create.py:574: in connect
    return dialect.connect(*cargs, **cparams)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py:598: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=localhost user=postgres password=postgres port=5432 dbname=postgres', connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
&gt;       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at "localhost" (::1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E
E       (Background on this error at: https://sqlalche.me/e/14/e3q8)

../venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError</error></testcase><testcase classname="tests.test_services" name="test_insert_subaccounts_happy_path[multiple_subaccounts]" time="0.001"><error message="failed on setup with &quot;sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at &quot;localhost&quot; (::1), port 5432 failed: Connection refused&#10;&#09;Is the server running on that host and accepting TCP/IP connections?&#10;connection to server at &quot;localhost&quot; (127.0.0.1), port 5432 failed: Connection refused&#10;&#09;Is the server running on that host and accepting TCP/IP connections?&#10;&#10;(Background on this error at: https://sqlalche.me/e/14/e3q8)&quot;">self = Engine(postgresql://postgres:***@localhost:5432/postgres), fn = &lt;bound method Pool.connect of &lt;sqlalchemy.pool.impl.QueuePool object at 0x103907fd0&gt;&gt;, connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
&gt;           return fn()

../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3371:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:327: in connect
    return _ConnectionFairy._checkout(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:894: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:493: in checkout
    rec = pool._do_get()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:145: in _do_get
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:143: in _do_get
    return self._create_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:273: in _create_connection
    return _ConnectionRecord(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:388: in __init__
    self.__connect()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:690: in __connect
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:686: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/create.py:574: in connect
    return dialect.connect(*cargs, **cparams)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py:598: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=localhost user=postgres password=postgres port=5432 dbname=postgres', connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
&gt;       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "localhost" (::1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?

../venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def test_db():
&gt;       Base.metadata.create_all(engine)

tests/test_services.py:11:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../venv/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:4930: in create_all
    bind._run_ddl_visitor(
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3237: in _run_ddl_visitor
    with self.begin() as conn:
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3153: in begin
    conn = self.connect(close_with_result=close_with_result)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3325: in connect
    return self._connection_cls(self, close_with_result=close_with_result)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:96: in __init__
    else engine.raw_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3404: in raw_connection
    return self._wrap_pool_connect(self.pool.connect, _connection)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3374: in _wrap_pool_connect
    Connection._handle_dbapi_exception_noconnection(
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2208: in _handle_dbapi_exception_noconnection
    util.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3371: in _wrap_pool_connect
    return fn()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:327: in connect
    return _ConnectionFairy._checkout(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:894: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:493: in checkout
    rec = pool._do_get()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:145: in _do_get
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:143: in _do_get
    return self._create_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:273: in _create_connection
    return _ConnectionRecord(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:388: in __init__
    self.__connect()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:690: in __connect
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:686: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/create.py:574: in connect
    return dialect.connect(*cargs, **cparams)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py:598: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=localhost user=postgres password=postgres port=5432 dbname=postgres', connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
&gt;       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at "localhost" (::1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E
E       (Background on this error at: https://sqlalche.me/e/14/e3q8)

../venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError</error></testcase><testcase classname="tests.test_services" name="test_insert_subaccounts_rollback" time="0.001"><error message="failed on setup with &quot;sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at &quot;localhost&quot; (::1), port 5432 failed: Connection refused&#10;&#09;Is the server running on that host and accepting TCP/IP connections?&#10;connection to server at &quot;localhost&quot; (127.0.0.1), port 5432 failed: Connection refused&#10;&#09;Is the server running on that host and accepting TCP/IP connections?&#10;&#10;(Background on this error at: https://sqlalche.me/e/14/e3q8)&quot;">self = Engine(postgresql://postgres:***@localhost:5432/postgres), fn = &lt;bound method Pool.connect of &lt;sqlalchemy.pool.impl.QueuePool object at 0x103907fd0&gt;&gt;, connection = None

    def _wrap_pool_connect(self, fn, connection):
        dialect = self.dialect
        try:
&gt;           return fn()

../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3371:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:327: in connect
    return _ConnectionFairy._checkout(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:894: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:493: in checkout
    rec = pool._do_get()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:145: in _do_get
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:143: in _do_get
    return self._create_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:273: in _create_connection
    return _ConnectionRecord(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:388: in __init__
    self.__connect()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:690: in __connect
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:686: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/create.py:574: in connect
    return dialect.connect(*cargs, **cparams)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py:598: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=localhost user=postgres password=postgres port=5432 dbname=postgres', connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
&gt;       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "localhost" (::1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?

../venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

    @pytest.fixture(scope="function")
    def test_db():
&gt;       Base.metadata.create_all(engine)

tests/test_services.py:11:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../venv/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:4930: in create_all
    bind._run_ddl_visitor(
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3237: in _run_ddl_visitor
    with self.begin() as conn:
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3153: in begin
    conn = self.connect(close_with_result=close_with_result)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3325: in connect
    return self._connection_cls(self, close_with_result=close_with_result)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:96: in __init__
    else engine.raw_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3404: in raw_connection
    return self._wrap_pool_connect(self.pool.connect, _connection)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3374: in _wrap_pool_connect
    Connection._handle_dbapi_exception_noconnection(
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2208: in _handle_dbapi_exception_noconnection
    util.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3371: in _wrap_pool_connect
    return fn()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:327: in connect
    return _ConnectionFairy._checkout(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:894: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:493: in checkout
    rec = pool._do_get()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:145: in _do_get
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:143: in _do_get
    return self._create_connection()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:273: in _create_connection
    return _ConnectionRecord(self)
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:388: in __init__
    self.__connect()
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:690: in __connect
    with util.safe_reraise():
../venv/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70: in __exit__
    compat.raise_(
../venv/lib/python3.10/site-packages/sqlalchemy/util/compat.py:211: in raise_
    raise exception
../venv/lib/python3.10/site-packages/sqlalchemy/pool/base.py:686: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/create.py:574: in connect
    return dialect.connect(*cargs, **cparams)
../venv/lib/python3.10/site-packages/sqlalchemy/engine/default.py:598: in connect
    return self.dbapi.connect(*cargs, **cparams)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'host=localhost user=postgres password=postgres port=5432 dbname=postgres', connection_factory = None, cursor_factory = None
kwargs = {'database': 'postgres', 'host': 'localhost', 'password': 'postgres', 'port': 5432, ...}, kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
&gt;       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at "localhost" (::1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E       connection to server at "localhost" (127.0.0.1), port 5432 failed: Connection refused
E       	Is the server running on that host and accepting TCP/IP connections?
E
E       (Background on this error at: https://sqlalche.me/e/14/e3q8)

../venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError</error></testcase><testcase classname="tests.test_utils_migrations" name="test_sync_models_with_db_error_handling" time="0.001"><error message="failed on setup with &quot;TypeError: sync_models_with_db() takes 0 positional arguments but 1 was given&quot;">@pytest.fixture(scope="function")
    def test_engine():
        """
        Configura um banco de dados para testes baseado na variável de ambiente.
        """
        DB_URL = os.getenv("TEST_DB_URL", "sqlite:///:memory:")
        test_engine = create_engine(DB_URL, echo=True)

        with test_engine.connect() as conn:
            if "sqlite" in DB_URL:
                conn.execute(text("PRAGMA foreign_keys = OFF;"))

&gt;       sync_models_with_db(test_engine)
E       TypeError: sync_models_with_db() takes 0 positional arguments but 1 was given

tests/test_utils_migrations.py:71: TypeError</error></testcase><testcase classname="tests.test_utils_migrations" name="test_sync_models_with_db_add_columns[test_table-&lt;lambda&gt;-&lt;lambda&gt;-expected_alter_statements0]" time="0.001"><error message="failed on setup with &quot;TypeError: sync_models_with_db() takes 0 positional arguments but 1 was given&quot;">@pytest.fixture(scope="function")
    def test_engine():
        """
        Configura um banco de dados para testes baseado na variável de ambiente.
        """
        DB_URL = os.getenv("TEST_DB_URL", "sqlite:///:memory:")
        test_engine = create_engine(DB_URL, echo=True)

        with test_engine.connect() as conn:
            if "sqlite" in DB_URL:
                conn.execute(text("PRAGMA foreign_keys = OFF;"))

&gt;       sync_models_with_db(test_engine)
E       TypeError: sync_models_with_db() takes 0 positional arguments but 1 was given

tests/test_utils_migrations.py:71: TypeError</error></testcase><testcase classname="tests.test_utils_migrations" name="test_sync_models_with_db_add_columns[test_table-&lt;lambda&gt;-&lt;lambda&gt;-expected_alter_statements1]" time="0.001"><error message="failed on setup with &quot;TypeError: sync_models_with_db() takes 0 positional arguments but 1 was given&quot;">@pytest.fixture(scope="function")
    def test_engine():
        """
        Configura um banco de dados para testes baseado na variável de ambiente.
        """
        DB_URL = os.getenv("TEST_DB_URL", "sqlite:///:memory:")
        test_engine = create_engine(DB_URL, echo=True)

        with test_engine.connect() as conn:
            if "sqlite" in DB_URL:
                conn.execute(text("PRAGMA foreign_keys = OFF;"))

&gt;       sync_models_with_db(test_engine)
E       TypeError: sync_models_with_db() takes 0 positional arguments but 1 was given

tests/test_utils_migrations.py:71: TypeError</error></testcase><testcase classname="tests.test_utils_migrations" name="test_sync_models_with_db_no_missing_columns[existing_table]" time="0.001"><error message="failed on setup with &quot;TypeError: sync_models_with_db() takes 0 positional arguments but 1 was given&quot;">@pytest.fixture(scope="function")
    def test_engine():
        """
        Configura um banco de dados para testes baseado na variável de ambiente.
        """
        DB_URL = os.getenv("TEST_DB_URL", "sqlite:///:memory:")
        test_engine = create_engine(DB_URL, echo=True)

        with test_engine.connect() as conn:
            if "sqlite" in DB_URL:
                conn.execute(text("PRAGMA foreign_keys = OFF;"))

&gt;       sync_models_with_db(test_engine)
E       TypeError: sync_models_with_db() takes 0 positional arguments but 1 was given

tests/test_utils_migrations.py:71: TypeError</error></testcase><testcase classname="tests.test_utils_migrations" name="test_sync_models_with_db_no_missing_columns[non_existing_table]" time="0.001"><error message="failed on setup with &quot;TypeError: sync_models_with_db() takes 0 positional arguments but 1 was given&quot;">@pytest.fixture(scope="function")
    def test_engine():
        """
        Configura um banco de dados para testes baseado na variável de ambiente.
        """
        DB_URL = os.getenv("TEST_DB_URL", "sqlite:///:memory:")
        test_engine = create_engine(DB_URL, echo=True)

        with test_engine.connect() as conn:
            if "sqlite" in DB_URL:
                conn.execute(text("PRAGMA foreign_keys = OFF;"))

&gt;       sync_models_with_db(test_engine)
E       TypeError: sync_models_with_db() takes 0 positional arguments but 1 was given

tests/test_utils_migrations.py:71: TypeError</error></testcase></testsuite></testsuites>
